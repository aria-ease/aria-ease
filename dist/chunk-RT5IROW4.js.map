{"version":3,"sources":["/Users/macx/aria-ease/package/dist/chunk-RT5IROW4.js","../src/utils/handleKeyPress/handleKeyPress.ts"],"names":["isTextInput","el","tagName","type","includes","isTextArea","isNativeButton","isLink","moveFocus","elementItems","currentIndex","direction","len","length","nextIndex","item","focus","isClickableButNotSemantic","getAttribute","handleMenuEscapeKeyPress","menuElement","menuTriggerButton","style","display","menuTriggerButtonId","Error","setAttribute","handleKeyPress","event","elementItemIndex","menuElementDiv","triggerButton","currentEl","key","preventDefault","cursorStart","selectionStart"],"mappings":"AAAA,6CAA6C;ACG7C,SAASA,YAAYC,EAAA;UACjB,CAAA,CAAA,CAAA,CAAIA,CAAAA,EAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAA,CAAA,EAAA,EAAY,GAAA,EAAA,EAAA,EAAS,CAAA,EAAA,EAAA,EAAO;QAC7BC,OAAQF,GAAwBE,IAAA;UACtC,CAAA;QAAA,CAAA;QAAA;QAAA;QAAA;QAAA;KAAA,CAAA,QAAA,CAAA;QAAA,CAAA;QAAA,CAAA,WAAA,EAAA;UAAA,CAAA,GAAA,OAAA,KAAA;QAAA;QAAA,CAAA,eAAA,EAAA;OAAA,CAAA,GAAA,GAAA,EAAA,CAAA,IAAA,KAAA,YAAA,GAAA,OAAA,KAAA,WAAA;QAAA;QAAA;QAAA;KAAA,CAAA,QAAA,CAAA,GAAA,IAAA;QAAA,CAAO;QAAA,CAAA,OAAA,EAAA,EAAA,EAAA;YAAA,CAAA,CAAA,EAAA,KAAA,EAAA,GAAA,EAAA;QAAA;QAAA,CAAA,UAAA,KAAA,EAAA,KAAA,EAAA,YAAA,EAAA,SAAA;QAAA,CAAA,EAAA,GAAA,EAAA,CAAA,IAAA,KAAA,CAAA,MAAA,KAAA,GAAA,OAAA,KAAA,WAAA;QAAA,YAAA,CAAA,eAAA,YAAA,GAAA,IAAA;UAAA,OAAA,IAAA,CAAA,WAAA,KAAA;QAAA;KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAA,aAAA,EAAA;UAAC,CAAA,GAAA,YAAA,CAAA,yBAAA,QAAA,GAAA,YAAA,CAAA,yBAAA,KAAA;QAAQ,CAAA,OAAA,EAAA,EAAA,EAAA;YAAS,CAAA,CAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,WAAA,EAAA,iBAAA;UAAY,MAAA,KAAA,CAAA,OAAA,GAAA;QAAO,CAAA,UAAA,KAAA,EAAA,IAAA,CAAA,EAAA,YAAA,EAAA,CAAA,QAAA,IAAA,CAAA;UAAUC,CAAF,EAAEA,GAAAA,EAAA,CAASD,IAAAA,KAAAA,CAAAA,CAAAA,KAAAA,KAAAA,GAAAA,OAAAA,KAAAA,WAAAA;YAAAA,EAAAA,IAAAA,MAAAA,CAAAA,eAAAA,YAAAA,GAAAA,IAAAA;YAAAA,OAAAA,IAAAA,CAAAA,WAAAA,KAAAA;UAAAA,YAAAA,YAAAA,CAAAA,iBAAAA;KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAAA,aAAAA,EAAAA;IACnE,KAAA,EAAA,GAAA,UAAA,EAAA,CAAA,EAAA,EAAA,YAAA,EAAA,OAAA,QAAA,CAAA,EAAA,YAAA,CAAA,CAAA,EAAA,aAAA,SAAA,KAAA;IAEA,IAAA,CAASE,OAAAA,EAAAA,EAAWJ,EAAA,WAAA,IAAA,CAAA;QAChB,GAAA,CAAA,EAAOA,CAAAA,EAAGC,GAAAA,EAAAA,EAAA,GAAA,EAAY,MAAA,WAAA,EAAA,iBAAA;QAC1B,KAAA,OAAA,KAAA,CAAA,OAAA,GAAA;QAEO,IAAA,CAASI,UAAAA;YAAAA,EAAeL,EAAA,IAAA,CAAA,EAAA,YAAA,EAAA,CAAA,QAAA,IAAA,CAAA;kBAC3B,CAAA,CAAA,CAAA,EAAOA,GAAGC,OAAA,KAAY,CAAA,CAAA,KAAA,EAAA,CAAA,EAAaD,GAAGC,MAAAA,CAAA,KAAY,MAAA,KAAW;wBAAC,EAAA,IAAA,MAAA,CAAA,GAAA,YAAA,YAAA,GAAA,IAAA;wBAAU,MAAA,CAAA,IAAA,CAAA,QAAA,GAAA,KAAA,UAAA,CAAA;oBAAU,GAAA,IAAA,KAAA,OAAA,KAAA,CAAA,QAAA,SAAA,EAAA,YAAA;oBAASE,CAAAA,GAAA,CAAUH,GAAwBE,IAAI,MAAA,OAAA,EAAA,CAAA,cAAA;oBACrI,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA,CAAA,CAAA,EAAA,YAAA,EAAA,OAAA,QAAA,CAAA,EAAA,YAAA,CAAA,CAAA,EAAA,aAAA,SAAA,KAAA;wBAEgBI,MAAON,EAAA,EAAA,UAAA,GAAA,IAAA,CAAA;wBACnB,CAAA,CAAOA,GAAGC,EAAAA,GAAAA,EAAA,KAAY,OAAA,CAAA,WAAA,EAAA,IAAA,CAAA,YAAA;oBAC1B,KAAA,OAAA,KAAA,CAAA,OAAA,GAAA;kBAEA,IAAA,CAASM,UAAUC;sBAAAA,QAAAA,CAAA,EAAqCC,YAAA,EAAsBC,CAAAA,QAAA,IAAA,CAAA;wBAC1E,EAAA,CAAA,CAAMC,CAAAA,KAAMH,OAAAA,MAAaI,CAAAA,KAAA,EAAA,CAAA,WAAA,YAAA;wBACzB,IAAMC,EAAAA,IAAAA,MAAaJ,CAAAA,GAAAA,YAAeC,YAAYC,GAAA,IAAOA;wBACrDH;YAAAA,OAAAA,CAAaM,IAAA,CAAKD,QAAAA,GAAWE,KAAA,UAAA,CAAA;0BACjC,OAAA,IAAA,KAAA,KAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,QAAA,CAAA,EAAA,YAAA;gCAEA,CAASC,GAAAA,IAAAA,UAAAA,OAA0BhB,EAAA,CAAA,cAAA;gCAC/B,CAAA,EAAOA,CAAAA,EAAGiB,MAAAA,IAAAA,EAAA,CAAa,CAAA,CAAA,EAAA,OAAA,KAAA,EAAA,OAAyB,QAAQjB,CAAAA,EAAGiB,YAAA,CAAa,CAAA,EAAA,aAAA,SAAyB,KAAA;kCACrG,KAAA,CAAA,IAAA,SAAA,CAAA,GAAA,IAAA,CAAA,EAAA,YAAA;kCAEA,CAASC,MAAAA,CAAAA,EAAAA,GAAAA,WAAAA,CAAyBC,WAAA,EAA0BC,IAAAA,CAAAA,YAAA;8BACxDD,KAAAA,CAAAA,MAAYE,IAAAA,CAAA,CAAMC,OAAA,GAAU,EAAA;8BAC5B,IAAMC,CAAAA,GAAAA,MAAAA,MAAAA,EAAAA;oCAAAA,QAAsBH,kBAAkBH,YAAA,CAAa;sCAC3D,EAAI,CAACM,CAAAA,CAAAA,KAAAA,OAAAA,OAAqB,IAAA,GAAA,CAAA,WAAA,YAAA;oCACtB,MAAM,IAAIC,MAAM,IAAA;kCACpB;sBAAA,OAAA,cAAA,kBAAA,CAAA;kCACAJ,OAAAA,IAAAA,KAAkBK,KAAAA,CAAAA,CAAAA,KAAA,CAAa,IAAA,IAAA,QAAA,CAAiB,EAAA,YAAA;;yBACpD,IAAA,IAAA,UAAA,UAAA,cAAA;0CAEO,CAASC,GAAAA,QAAAA,IACZC,IAAAA,CAAA,EACAnB,OAAAA,KAAA,EACAoB,gBAAA,EACAC,cAAA,EACAC,aAAA;4CAEMC,KAAAA,CAAAA,GAAAA,CAAYvB,SAAAA,CAAAA,GAAaM,IAAA,CAAKc,EAAAA,YAAAA;8CACpC,CAAQD,MAAMK,CAAAA,EAAA,CAAA,EAAA,KAAA,KAAA,CAAA,QAAA,UAAA,CAAA;4CACV,KAAK,CAAA,UAAA,KAAA,SAAA;0CACL,KAAK,GAAA,MAAA,MAAA,EAAA;gDAAa,QAAA;gDACd,IAAI,CAACjC,KAAAA,OAAYgC,WAAAA,GAAc,CAAC3B,WAAW2B,YAAY;8CACnDJ,MAAMM,cAAA;0CACN1B;0BAAAA,OAAUC,cAAcoB,kBAAkB,CAAA;;gCAC9C,OAAA,IAAW7B,UAAAA,CAAAA,CAAYgC,UAAAA,IAAc3B,QAAAA,GAAW2B,YAAY;;qCACxD,GAAA,CAAMG,IAAAA,UAAeH,UAAqDI,cAAA;sDAC1E,IAAID,QAAAA,QAAgB,GAAG,OAAA;sDACnBP,KAAAA,CAAMM,GAAAA,UAAAA,CAAA,UAAA,YAAA;wDACN1B,QAAAA,EAAUC,CAAAA,EAAAA,KAAAA,KAAAA,CAAcoB,QAAAA,UAAkB,CAAA;oDAC9C,KAAA,CAAA,UAAA,KAAA,SAAA;0CACJ,UAAA,MAAA,MAAA,EAAA;0CACA,cAAA;8BAEJ,KAAK,kBACL,KAAK,WAAA","sourcesContent":["// src/utils/handleKeyPress/handleKeyPress.ts\nfunction isTextInput(el) {\n  if (el.tagName !== \"INPUT\") return false;\n  const type = el.type;\n  return [\"text\", \"email\", \"password\", \"tel\", \"number\"].includes(type);\n}\nfunction isTextArea(el) {\n  return el.tagName === \"TEXTAREA\";\n}\nfunction isNativeButton(el) {\n  return el.tagName === \"BUTTON\" || el.tagName === \"INPUT\" && [\"button\", \"submit\", \"reset\"].includes(el.type);\n}\nfunction isLink(el) {\n  return el.tagName === \"A\";\n}\nfunction moveFocus(elementItems, currentIndex, direction) {\n  const len = elementItems.length;\n  const nextIndex = (currentIndex + direction + len) % len;\n  elementItems.item(nextIndex).focus();\n}\nfunction isClickableButNotSemantic(el) {\n  return el.getAttribute(\"data-custom-click\") !== null || el.getAttribute(\"data-custom-click\") !== void 0;\n}\nfunction handleMenuEscapeKeyPress(menuElement, menuTriggerButton) {\n  menuElement.style.display = \"none\";\n  const menuTriggerButtonId = menuTriggerButton.getAttribute(\"id\");\n  if (!menuTriggerButtonId) {\n    throw new Error(\"Menu trigger button does not have id attribute\");\n  }\n  menuTriggerButton.setAttribute(\"aria-expanded\", \"false\");\n}\nfunction handleKeyPress(event, elementItems, elementItemIndex, menuElementDiv, triggerButton) {\n  const currentEl = elementItems.item(elementItemIndex);\n  switch (event.key) {\n    case \"ArrowUp\":\n    case \"ArrowLeft\": {\n      if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n        event.preventDefault();\n        moveFocus(elementItems, elementItemIndex, -1);\n      } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n        const cursorStart = currentEl.selectionStart;\n        if (cursorStart === 0) {\n          event.preventDefault();\n          moveFocus(elementItems, elementItemIndex, -1);\n        }\n      }\n      break;\n    }\n    case \"ArrowDown\":\n    case \"ArrowRight\": {\n      if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n        event.preventDefault();\n        moveFocus(elementItems, elementItemIndex, 1);\n      } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n        const value = currentEl.value;\n        const cursorEnd = currentEl.selectionStart;\n        if (cursorEnd === value.length) {\n          event.preventDefault();\n          moveFocus(elementItems, elementItemIndex, 1);\n        }\n      }\n      break;\n    }\n    case \"Escape\": {\n      event.preventDefault();\n      if (menuElementDiv && triggerButton) {\n        if (getComputedStyle(menuElementDiv).display === \"block\") {\n          handleMenuEscapeKeyPress(menuElementDiv, triggerButton);\n        }\n        triggerButton.focus();\n      }\n      break;\n    }\n    case \"Enter\":\n    case \" \": {\n      if (!isNativeButton(currentEl) && !isLink(currentEl) && isClickableButNotSemantic(currentEl)) {\n        event.preventDefault();\n        currentEl.click();\n      }\n      break;\n    }\n  }\n}\n\nexport { handleKeyPress };\n//# sourceMappingURL=chunk-RT5IROW4.js.map\n","import { NodeListOfHTMLElement, HTMLElement } from \"../../../Types\";\n\n\nfunction isTextInput(el: HTMLElement): boolean {\n    if (el.tagName !== 'INPUT') return false;\n    const type = (el as HTMLInputElement).type;\n    return ['text', 'email', 'password', 'tel', 'number'].includes(type);\n}\n\nfunction isTextArea(el: HTMLElement): boolean {\n    return el.tagName === 'TEXTAREA';\n}\n\nexport function isNativeButton(el: HTMLElement): boolean {\n    return el.tagName === 'BUTTON' || (el.tagName === 'INPUT' && ['button', 'submit', 'reset'].includes((el as HTMLInputElement).type));\n}\n\nexport function isLink(el: HTMLElement): boolean {\n    return el.tagName === 'A';\n}\n\nfunction moveFocus(elementItems: NodeListOfHTMLElement, currentIndex: number, direction: -1 | 1) {\n    const len = elementItems.length;\n    const nextIndex = (currentIndex + direction + len) % len;\n    elementItems.item(nextIndex).focus();\n}\n\nfunction isClickableButNotSemantic(el: HTMLElement): boolean {\n    return el.getAttribute(\"data-custom-click\") !== null || el.getAttribute(\"data-custom-click\") !== undefined;\n}\n\nfunction handleMenuEscapeKeyPress(menuElement: HTMLElement, menuTriggerButton: HTMLElement) {\n    menuElement.style.display = 'none';\n    const menuTriggerButtonId = menuTriggerButton.getAttribute('id');\n    if (!menuTriggerButtonId) {\n        throw new Error(\"Menu trigger button does not have id attribute\");\n    }\n    menuTriggerButton.setAttribute(\"aria-expanded\", \"false\");\n}\n\nexport function handleKeyPress(\n    event: KeyboardEvent,\n    elementItems: NodeListOfHTMLElement,\n    elementItemIndex: number,\n    menuElementDiv?: HTMLElement,\n    triggerButton?: HTMLElement\n): void {\n    const currentEl = elementItems.item(elementItemIndex);\n    switch (event.key) {\n        case 'ArrowUp':\n        case 'ArrowLeft': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, -1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const cursorStart = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (cursorStart === 0) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, -1);\n                }\n            }\n            break;\n        }\n        case 'ArrowDown':\n        case 'ArrowRight': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, 1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const value = (currentEl as HTMLInputElement | HTMLTextAreaElement).value;\n                const cursorEnd = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (cursorEnd === value.length) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, 1);\n                }\n            }\n            break;\n        }\n        case 'Escape': {\n            event.preventDefault();\n            if (menuElementDiv && triggerButton) {\n                if (getComputedStyle(menuElementDiv).display === 'block') {\n                    handleMenuEscapeKeyPress(menuElementDiv, triggerButton);\n                }\n                triggerButton.focus();\n            }\n            break;\n        }\n        case 'Enter':\n        case ' ': {\n            if (!isNativeButton(currentEl) && !isLink(currentEl) && isClickableButNotSemantic(currentEl)) {\n                event.preventDefault();\n                currentEl.click();\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}"]}