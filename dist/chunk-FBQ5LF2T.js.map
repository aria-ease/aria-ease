{"version":3,"sources":["/Users/macx/aria-ease/package/dist/chunk-FBQ5LF2T.js","../src/toggle/src/updateToggleAriaAttribute/updateToggleAriaAttribute.ts"],"names":["updateToggleAriaAttribute","toggleId","togglesClass","toggleStates","currentPressedToggleIndex","toggleDiv","document","querySelector","Error","toggleItems","Array","from","querySelectorAll","length","forEach","toggle","index","setAttribute","pressed"],"mappings":"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","sourcesContent":["// src/toggle/src/updateToggleAriaAttribute/updateToggleAriaAttribute.ts\nfunction updateToggleAriaAttribute(toggleId, togglesClass, toggleStates, currentPressedToggleIndex) {\n  const toggleDiv = document.querySelector(`#${toggleId}`);\n  if (!toggleDiv) {\n    throw new Error(\"Invalid toggle main div id provided.\");\n  }\n  const toggleItems = Array.from(toggleDiv.querySelectorAll(`.${togglesClass}`));\n  if (toggleItems.length === 0) {\n    throw new Error(\"Invalid toggles shared class provided.\");\n  }\n  if (toggleItems.length !== toggleStates.length) {\n    throw new Error(`Toggle state/DOM length mismatch: found ${toggleItems.length} triggers, but got ${toggleStates.length} state objects.`);\n  }\n  toggleItems.forEach((toggle, index) => {\n    if (index === currentPressedToggleIndex) {\n      toggle.setAttribute(\"aria-pressed\", toggleStates[index].pressed ? \"true\" : \"false\");\n    }\n  });\n}\n\nexport { updateToggleAriaAttribute };\n//# sourceMappingURL=chunk-FBQ5LF2T.js.map\n","/**\n * Adds screen reader accessibility to toggle buttons. Updates the aria attributes of the toggle buttons. Button must be a semantic button element or a non-semantic element with a role of button, and possess the aria-pressed attribute.\n * @param {string} toggleId The id of the toggle buttons parent container.\n * @param {string} togglesClass The shared class of all the toggle buttons.\n * @param {ToggleStates[]} toggleStates Array of objects containing toggle buttons state information.\n * @param {number} currentPressedToggleIndex Index of the currently pressed or unpressed toggle button.\n*/\n\nimport { HTMLElement, ToggleStates } from \"../../../../Types\";\n\nexport function updateToggleAriaAttribute(toggleId: string, togglesClass: string, toggleStates: ToggleStates[], currentPressedToggleIndex: number): void {\n  const toggleDiv: HTMLElement | null = document.querySelector(`#${toggleId}`);\n  if (!toggleDiv) {\n    throw new Error(\"Invalid toggle main div id provided.\");\n  }\n\n  const toggleItems: HTMLElement[] = Array.from(toggleDiv.querySelectorAll(`.${togglesClass}`));\n  if (toggleItems.length === 0) {\n    throw new Error('Invalid toggles shared class provided.');\n  }\n\n  if(toggleItems.length !== toggleStates.length) {\n    throw new Error(`Toggle state/DOM length mismatch: found ${toggleItems.length} triggers, but got ${toggleStates.length} state objects.`);\n  }\n\n  toggleItems.forEach((toggle, index) => {\n    if (index === currentPressedToggleIndex) {\n      toggle.setAttribute(\"aria-pressed\", toggleStates[index].pressed ? 'true' : 'false');\n    }\n  });\n}"]}