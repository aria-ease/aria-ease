{"version":3,"sources":["/Users/macx/aria-ease/package/dist/chunk-KVTLMA4J.js","../src/menu/src/makeMenuAccessible/makeMenuAccessible.ts"],"names":["handleKeyPress","menuElementsClass","menuDiv","document","querySelector","menuId","Error","triggerButton","triggerId","handlerMap","Map","setAria","isOpen","setAttribute","addListeners","querySelectorAll","menuItems","forEach","menuItem","index","has"],"mappings":"AAAA,SAASA,cAAc,QAAQ,sBAAsB;QCURC,CAAAA,QAAAA,MAAAA,CAAAA,IAAAA,KAAAA,EAAAA,MAAAA,YAAAA,GAAAA;QAAAA,CAAAA,QAAAA,MAAAA,CAAAA,IAAAA,KAAAA,EAAAA,MAAAA,YAAAA;QAAAA,SAAAA,MAAAA,CAAAA,OAAAA,oBAAAA,MAAAA,aAAAA,MAAAA,YAAAA;QACrCC,UAAUC,SAASC,aAAA,CAAc,IAAIC,OAAM;8HACjD,CAAA,CAAA,CAAA,CAAI,CAACH,CAAAA,EAAAA,EAAAA,EAAAA,EAAS,EAAA,EAAA,EAAM,EAAA,EAAII,EAAAA,EAAAA,EAAM;QAExBC,gBAAgBJ,SAASC,aAAA,CAAc,IAAII,CAAAA,CAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAATA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;8HACjD,CAAA,CAAA,CAAA,CAAI,CAACD,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAe,EAAA,EAAA,EAAM,EAAA,EAAID,EAAAA,EAAAA,EAAM;QAG9BG,aAAA,aAAA,GAAA,IAAiBC;8HAEvB,CAAA,EAAA,EAAA,EAAA,EAASC,EAAAA,EAAAA,EAAAA,EAAQC,EAAAA,EAAAA,EAAA;4PACfL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAcM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAa,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAiBD,CAAAA,CAAAA,GAAAA,CAAAA,GAAS,CAAA,IAAA,IAAS;8HAChE;8HAEA,CAAA,EAAA,EAAA,EAAA,EAASE;qDACmBC,CAApBC,CAAoBD,CAApBC,CAAqC,CAAzBd,CAA6BD,CAArBc,CAApBC,CAAoBD,CAApBC,CAAoBD,CAARb,CAAyB,CAAzBA,CAA6BD,CAArBc,CAApBC,CAAoBD,CAApBC,CAAoBD,CAARb,CAAyB,CAAjBa,CAAsC;osBAChEC,CAAAA,CAAAA,OAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAAAA,EAAAA,CAAUC,OAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAAAA,EAAA,CAAQ,OAAA,EAACC,UAAuBC;0XACxC,CAAA,CAAA,EAAI,CAACV,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAWW,GAAA,CAAIF,KAAAA,MAAW","sourcesContent":["import { handleKeyPress } from './chunk-RT5IROW4.js';\n\n// src/menu/src/makeMenuAccessible/makeMenuAccessible.ts\nfunction makeMenuAccessible({ menuId, menuElementsClass, triggerId }) {\n  const menuDiv = document.querySelector(`#${menuId}`);\n  if (!menuDiv) throw new Error(\"Invalid menu div id provided\");\n  const triggerButton = document.querySelector(`#${triggerId}`);\n  if (!triggerButton) throw new Error(\"Invalid trigger button id provided\");\n  const handlerMap = /* @__PURE__ */ new Map();\n  function setAria(isOpen) {\n    triggerButton.setAttribute(\"aria-expanded\", isOpen ? \"true\" : \"false\");\n  }\n  function addListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    menuItems.forEach((menuItem, index) => {\n      if (!handlerMap.has(menuItem)) {\n        const handler = (event) => handleKeyPress(event, menuItems, index, menuDiv, triggerButton);\n        menuItem.addEventListener(\"keydown\", handler);\n        handlerMap.set(menuItem, handler);\n      }\n    });\n  }\n  function removeListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    menuItems.forEach((menuItem) => {\n      const handler = handlerMap.get(menuItem);\n      if (handler) {\n        menuItem.removeEventListener(\"keydown\", handler);\n        handlerMap.delete(menuItem);\n      }\n    });\n  }\n  function openMenu() {\n    menuDiv.style.display = \"block\";\n    setAria(true);\n    addListeners();\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    if (menuItems.length > 0) menuItems[0].focus();\n  }\n  function closeMenu() {\n    removeListeners();\n    menuDiv.style.display = \"none\";\n    setAria(false);\n    triggerButton.focus();\n  }\n  function cleanup() {\n    removeListeners();\n  }\n  return { openMenu, closeMenu, cleanup };\n}\n\nexport { makeMenuAccessible };\n//# sourceMappingURL=chunk-KVTLMA4J.js.map\n","/**\n  * Adds keyboard interaction to toggle menu. The menu traps focus and can be interacted with using the keyboard. The first interactive item of the menu has focus when menu open.\n  * @param {string} menuId - The id of the menu.\n  * @param {string} menuElementsClass - The class of the items that are children of the menu.\n  * @param {string} triggerId - The id of the button that triggers the menu.\n*/\n\nimport { handleKeyPress } from \"../../../utils/handleKeyPress/handleKeyPress\";\nimport { NodeListOfHTMLElement } from \"../../../../Types\";\n\nexport function makeMenuAccessible({ menuId, menuElementsClass, triggerId }: {menuId: string; menuElementsClass: string; triggerId: string;}) {\n  const menuDiv = document.querySelector(`#${menuId}`) as HTMLElement;\n  if (!menuDiv) throw new Error(\"Invalid menu div id provided\");\n\n  const triggerButton = document.querySelector(`#${triggerId}`) as HTMLElement;\n  if (!triggerButton) throw new Error(\"Invalid trigger button id provided\");\n\n\n  const handlerMap = new Map<HTMLElement, (event: KeyboardEvent) => void>();\n\n  function setAria(isOpen: boolean) {\n    triggerButton.setAttribute(\"aria-expanded\", isOpen ? \"true\" : \"false\");\n  }\n\n  function addListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    menuItems.forEach((menuItem: HTMLElement, index: number) => {\n      if (!handlerMap.has(menuItem)) {\n        const handler = (event: KeyboardEvent) => handleKeyPress(event, menuItems, index, menuDiv, triggerButton);\n        menuItem.addEventListener(\"keydown\", handler);\n        handlerMap.set(menuItem, handler);\n      }\n    });\n  }\n\n  function removeListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    menuItems.forEach((menuItem: HTMLElement) => {\n      const handler = handlerMap.get(menuItem);\n      if (handler) {\n        menuItem.removeEventListener(\"keydown\", handler);\n        handlerMap.delete(menuItem);\n      }\n    });\n  }\n\n  function openMenu() {\n    menuDiv.style.display = \"block\";\n    setAria(true);\n    addListeners();\n  \n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    if (menuItems.length > 0) menuItems[0].focus();\n  }\n\n  function closeMenu() {\n    removeListeners();\n    menuDiv.style.display = \"none\";\n    setAria(false);\n    triggerButton.focus();\n  }\n\n  function cleanup() {\n    removeListeners();\n  }\n\n  return { openMenu, closeMenu, cleanup };\n}"]}