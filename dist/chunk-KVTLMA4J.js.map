{"version":3,"sources":["/Users/macx/aria-ease/package/dist/chunk-KVTLMA4J.js","../src/menu/src/makeMenuAccessible/makeMenuAccessible.ts"],"names":["handleKeyPress","makeMenuAccessible","menuId","menuElementsClass","triggerId","menuDiv","document","querySelector","Error","triggerButton","handlerMap","Map","setAria","isOpen","setAttribute","addListeners","menuItems","querySelectorAll","forEach","menuItem","index","has","handler","event","addEventListener","set","removeListeners","get","removeEventListener","delete","openMenu","style","display","length","focus","closeMenu","cleanup"],"mappings":"AAAA,SAASA,cAAc,QAAQ,sBAAsB;ACU9C,SAASC,mBAAmB,KAAuC,uBAAA;QAArCC,CAAAA,QAAF,MAAEA,KAAAA,KAAQC,QAAmBC,YAA7B,MAA6BA;QAA3BF,SAAAA,MAAAA,CAAQC,OAAAA,oBAARD,MAAQC,aAAV,MAAUA,YAARD;MACnC,EAAMG,UAAUC,SAASC,aAAA,CAAc,IAAIL,OAAM;MACjD,EAAA,CAAA,CAAI,CAACG,OAAAA,EAAS,IAAA,EAAM,EAAA,EAAIG,IAAAA,EAAM;MAE9B,EAAMC,gBAAgBH,SAASC,aAAA,CAAc,IAAIH,OAAS,OAATA;MACjD,EAAA,CAAA,CAAI,CAACK,aAAAA,EAAe,IAAA,EAAM,EAAA,EAAID,IAAAA,EAAM;MAGpC,EAAME,aAAA,aAAA,GAAA,IAAiBC;MAEvB,OAAA,EAASC,MAAAA,EAAQC,IAAAA,EAAA;YACfJ,UAAAA,IAAcK,QAAAA,CAAAA,GAAA,CAAa,aAAA,IAAiBD,KAAAA,IAAS,KAAA,IAAS;MAChE;MAEA,OAAA,EAASE;YACP,EAAMC,UAAAA,EAAYX,MAAAA,EAAQY,cAAAA,CAAA,AAAAA,CAAiB,GAAId,OAAJ,EAAqB,OAAjBA;YAC/Ca,MAAAA,IAAUE,GAAAA,CAAAA,SAAAA,EAAA,CAAQ,OAAA,EAACC,UAAuBC;kBACxC,IAAI,CAACV,KAAAA,GAAAA,CAAAA,EAAWW,GAAA,CAAIF,KAAAA,MAAW;sBAC7B,IAAMG,IAAAA,SAAAA,KAAU;2BAAA,IAACC,WAAAA,OAAAA,WAAAA,OAAAA,SAAAA;;mCAAyBvB,MAAAA,CAAAA,QAAeuB,GAAAA,IAAOP,WAAWI,OAAOf,SAASI;;sBAC3FU,SAASK,gBAAA,CAAiB,WAAWF;oBACrCZ,WAAWe,GAAA,CAAIN,UAAUG;cAC3B;UACF,GAAA;QACF,IAAA,YAAA,QAAA,gBAAA,CAAA,IAAA,OAAA;QAEA,SAASI,CAAAA,OAAAA,CAAAA,SAAAA;cACP,EAAMV,UAAAA,EAAYX,QAAQY,CAAAA,GAAAA,CAAAA,WAAA,CAAiB,IAAqB,OAAjBd;cAC/Ca,EAAAA,QAAUE,CAAAA,MAAA,CAAQ,SAACC;oBACjB,IAAMG,CAAAA,SAAUZ,UAAAA,CAAWiB,GAAA,CAAIR,OAAAA;oBAC/B,IAAIG,GAAAA,MAAS,CAAA;sBACXH,SAASS,mBAAA,CAAoB,WAAWN;oBACxCZ,WAAWmB,MAAA,CAAOV;cACpB;UACF,GAAA;QACF,QAAA,KAAA,CAAA,OAAA,GAAA;QAEA,QAAA,CAASW;YACPzB,QAAQ0B,KAAA,CAAMC,OAAA,GAAU;YACxBpB,MAAQ,MAAA,QAAA,gBAAA,CAAA,IAAA,OAAA;YACRG,UAAAA,MAAAA,GAAAA,GAAAA,SAAAA,CAAAA,EAAAA,CAAAA,KAAAA;UAEA,IAAMC,YAAYX,QAAQY,gBAAA,CAAiB,IAAqB,OAAjBd;UAC/C,GAAA,CAAIa,UAAUiB,MAAA,GAAS,GAAGjB,SAAA,CAAU,EAAC,CAAEkB,KAAA;QACzC;QAEA,QAAA,CAASC,IAAAA,CAAAA,OAAAA,GAAAA;YACPT,IAAAA;YACArB,QAAQ0B,EAAAA,GAAA,CAAMC,CAAAA,MAAA,GAAU;UACxBpB,QAAQ;UACRH,GAAAA,WAAcyB,KAAA;QAChB;MAEA,SAASE;UACPV,CAAAA;QAAAA,UAAAA;QAAAA,WAAAA;QAAAA,SAAAA;IAAAA;IACF;QAESI,CAAAA,SAAAA,SAAAA,GAAAA,SAAUK,WAAAA,uBAAAA","sourcesContent":["import { handleKeyPress } from './chunk-RT5IROW4.js';\n\n// src/menu/src/makeMenuAccessible/makeMenuAccessible.ts\nfunction makeMenuAccessible({ menuId, menuElementsClass, triggerId }) {\n  const menuDiv = document.querySelector(`#${menuId}`);\n  if (!menuDiv) throw new Error(\"Invalid menu div id provided\");\n  const triggerButton = document.querySelector(`#${triggerId}`);\n  if (!triggerButton) throw new Error(\"Invalid trigger button id provided\");\n  const handlerMap = /* @__PURE__ */ new Map();\n  function setAria(isOpen) {\n    triggerButton.setAttribute(\"aria-expanded\", isOpen ? \"true\" : \"false\");\n  }\n  function addListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    menuItems.forEach((menuItem, index) => {\n      if (!handlerMap.has(menuItem)) {\n        const handler = (event) => handleKeyPress(event, menuItems, index, menuDiv, triggerButton);\n        menuItem.addEventListener(\"keydown\", handler);\n        handlerMap.set(menuItem, handler);\n      }\n    });\n  }\n  function removeListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    menuItems.forEach((menuItem) => {\n      const handler = handlerMap.get(menuItem);\n      if (handler) {\n        menuItem.removeEventListener(\"keydown\", handler);\n        handlerMap.delete(menuItem);\n      }\n    });\n  }\n  function openMenu() {\n    menuDiv.style.display = \"block\";\n    setAria(true);\n    addListeners();\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    if (menuItems.length > 0) menuItems[0].focus();\n  }\n  function closeMenu() {\n    removeListeners();\n    menuDiv.style.display = \"none\";\n    setAria(false);\n    triggerButton.focus();\n  }\n  function cleanup() {\n    removeListeners();\n  }\n  return { openMenu, closeMenu, cleanup };\n}\n\nexport { makeMenuAccessible };\n//# sourceMappingURL=chunk-KVTLMA4J.js.map\n","/**\n  * Adds keyboard interaction to toggle menu. The menu traps focus and can be interacted with using the keyboard. The first interactive item of the menu has focus when menu open.\n  * @param {string} menuId - The id of the menu.\n  * @param {string} menuElementsClass - The class of the items that are children of the menu.\n  * @param {string} triggerId - The id of the button that triggers the menu.\n*/\n\nimport { handleKeyPress } from \"../../../utils/handleKeyPress/handleKeyPress\";\nimport { NodeListOfHTMLElement } from \"../../../../Types\";\n\nexport function makeMenuAccessible({ menuId, menuElementsClass, triggerId }: {menuId: string; menuElementsClass: string; triggerId: string;}) {\n  const menuDiv = document.querySelector(`#${menuId}`) as HTMLElement;\n  if (!menuDiv) throw new Error(\"Invalid menu div id provided\");\n\n  const triggerButton = document.querySelector(`#${triggerId}`) as HTMLElement;\n  if (!triggerButton) throw new Error(\"Invalid trigger button id provided\");\n\n\n  const handlerMap = new Map<HTMLElement, (event: KeyboardEvent) => void>();\n\n  function setAria(isOpen: boolean) {\n    triggerButton.setAttribute(\"aria-expanded\", isOpen ? \"true\" : \"false\");\n  }\n\n  function addListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    menuItems.forEach((menuItem: HTMLElement, index: number) => {\n      if (!handlerMap.has(menuItem)) {\n        const handler = (event: KeyboardEvent) => handleKeyPress(event, menuItems, index, menuDiv, triggerButton);\n        menuItem.addEventListener(\"keydown\", handler);\n        handlerMap.set(menuItem, handler);\n      }\n    });\n  }\n\n  function removeListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    menuItems.forEach((menuItem: HTMLElement) => {\n      const handler = handlerMap.get(menuItem);\n      if (handler) {\n        menuItem.removeEventListener(\"keydown\", handler);\n        handlerMap.delete(menuItem);\n      }\n    });\n  }\n\n  function openMenu() {\n    menuDiv.style.display = \"block\";\n    setAria(true);\n    addListeners();\n  \n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    if (menuItems.length > 0) menuItems[0].focus();\n  }\n\n  function closeMenu() {\n    removeListeners();\n    menuDiv.style.display = \"none\";\n    setAria(false);\n    triggerButton.focus();\n  }\n\n  function cleanup() {\n    removeListeners();\n  }\n\n  return { openMenu, closeMenu, cleanup };\n}"]}