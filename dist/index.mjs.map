{"version":3,"sources":["/Users/macx/aria-ease/package/dist/index.mjs","../src/accordion/index.ts","../src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts","../src/block/index.ts","../src/block/src/makeBlockAccessible/makeBlockAccessible.ts","../src/checkbox/index.ts","../src/checkbox/src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes.ts","../src/checkbox/src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes.ts","../src/menu/index.ts","../src/menu/src/cleanUpMenuEventListeners/cleanUpMenuEventListeners.ts","../src/menu/src/makeMenuAccessible/makeMenuAccessible.ts","../src/menu/src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes.ts"],"names":["__defProp","Object","defineProperty","__export","target","all","name","get","enumerable","accordion_exports","updateAccordionTriggerAriaAttributes","block_exports","makeBlockAccessible","blockId","blockItemsClass","updateGroupCheckboxesAriaAttributes","updateSingleCheckboxAriaAttributes","checkboxClass","updatedAriaLabel","console","log","menu_exports","cleanUpMenuEventListeners","makeMenuAccessible","updateMenuTriggerAriaAttributes","triggerId","ariaLabel"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/accordion/index.ts\nvar accordion_exports = {};\n__export(accordion_exports, {\n  updateAccordionTriggerAriaAttributes: () => updateAccordionTriggerAriaAttributes\n});\n\n// src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts\nfunction updateAccordionTriggerAriaAttributes(accordionStates, accordionsClass, currentClickedTriggerIndex) {\n  console.log(\"Accordion updateAccordionTriggerAriaAttributes initiated\");\n}\n\n// src/block/index.ts\nvar block_exports = {};\n__export(block_exports, {\n  makeBlockAccessible: () => makeBlockAccessible\n});\n\n// src/block/src/makeBlockAccessible/makeBlockAccessible.ts\nfunction makeBlockAccessible(blockId, blockItemsClass) {\n  console.log(\"Block makeBlockAccessible initiated\");\n}\n\n// src/checkbox/index.ts\nvar checkbox_exports = {};\n__export(checkbox_exports, {\n  updateGroupCheckboxesAriaAttributes: () => updateGroupCheckboxesAriaAttributes,\n  updateSingleCheckboxAriaAttributes: () => updateSingleCheckboxAriaAttributes\n});\n\n// src/checkbox/src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes.ts\nfunction updateSingleCheckboxAriaAttributes(checkboxClass, updatedAriaLabel) {\n  console.log(\"Checkbox updateSingleCheckboxAriaAttributes initiated\");\n}\n\n// src/checkbox/src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes.ts\nfunction updateGroupCheckboxesAriaAttributes(checkboxStates, checkboxesClass, currentPressedCheckboxIndex) {\n  console.log(\"Checkbox updateGroupCheckboxesAriaAttributes initiated\");\n}\n\n// src/menu/index.ts\nvar menu_exports = {};\n__export(menu_exports, {\n  cleanUpMenuEventListeners: () => cleanUpMenuEventListeners,\n  makeMenuAccessible: () => makeMenuAccessible,\n  updateMenuTriggerAriaAttributes: () => updateMenuTriggerAriaAttributes\n});\n\n// src/menu/src/cleanUpMenuEventListeners/cleanUpMenuEventListeners.ts\nfunction cleanUpMenuEventListeners(menuId, menuItemsClass) {\n  console.log(\"Menu cleanUpMenuEventListeners initiated\");\n}\n\n// src/menu/src/makeMenuAccessible/makeMenuAccessible.ts\nfunction makeMenuAccessible(menuId, menuItemsClass) {\n  console.log(\"Menu makeMenuAccessible initiated\");\n}\n\n// src/menu/src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes.ts\nfunction updateMenuTriggerAriaAttributes(triggerId, ariaLabel) {\n  console.log(\"Menu updateMenuTriggerAriaAttributes initiated\");\n}\n\n// src/radio/index.ts\nvar radio_exports = {};\n__export(radio_exports, {\n  updateGroupRadiosAriaAttributes: () => updateGroupRadiosAriaAttributes,\n  updateSingleRadioAriaAttributes: () => updateSingleRadioAriaAttributes\n});\n\n// src/radio/src/single-radio/updateSingleRadioAriaAttributes.ts\nfunction updateSingleRadioAriaAttributes(radioClass) {\n  console.log(\"Radio updateSingleRadioAriaAttributes initiated\");\n}\n\n// src/radio/src/group-radio/updateGroupRadiosAriaAttributes.ts\nfunction updateGroupRadiosAriaAttributes(radioStates, radiosClass, currentPressedRadioIndex) {\n  console.log(\"Radio updateGroupRadiosAriaAttributes initiated\");\n}\n\n// src/toggle/index.ts\nvar toggle_exports = {};\n__export(toggle_exports, {\n  updateGroupTogglesAriaAttributes: () => updateGroupTogglesAriaAttributes,\n  updateSingleToggleAriaAttributes: () => updateSingleToggleAriaAttributes\n});\n\n// src/toggle/src/single-toggle/updateSingleToggleAriaAttributes.ts\nfunction updateSingleToggleAriaAttributes(toggleClass) {\n  console.log(\"Toggle updateSingleToggleAriaAttributes initiated\");\n}\n\n// src/toggle/src/group-toggle/updateGroupTogglesAriaAttributes.ts\nfunction updateGroupTogglesAriaAttributes(toggleStates, togglesClass, currentPressedToggleIndex) {\n  console.log(\"Toggle updateGroupTogglesAriaAttributes initiated\");\n}\n\nexport { accordion_exports as Accordion, block_exports as Block, checkbox_exports as Checkbox, menu_exports as Menu, radio_exports as Radio, toggle_exports as Toggle };\n//# sourceMappingURL=index.mjs.map\n","import { updateAccordionTriggerAriaAttributes } from './src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes';\n\nexport { updateAccordionTriggerAriaAttributes }","/**\n * Adds screen reader accessibility to accordions. Updates the aria attributes of the accordion trigger button. Trigger button element must possess the following aria attributes; aria-expanded and aria-label.\n * @param {AccordionStates[]} accordionStates Array of objects containing accordions state information\n * @param {string} accordionsClass The shared class of all the accordion triggers\n * @param {number} currentClickedTriggerIndex Index of the currently clicked accordion trigger\n */\n\nimport { HTMLElement, AccordionStates } from \"../../../../Types\";\n\nexport function updateAccordionTriggerAriaAttributes(accordionStates: AccordionStates[], accordionsClass: string, currentClickedTriggerIndex: number): void {\n    console.log('Accordion updateAccordionTriggerAriaAttributes initiated')\n}","import { makeBlockAccessible } from \"./src/makeBlockAccessible/makeBlockAccessible\";\n\nexport { makeBlockAccessible }","/** \n * Adds keyboard interaction to block. The block traps focus and can be interacted with using the keyboard.\n * @param {string} blockId The id of the block\n * @param {string} blockItemsClass The shared class of the items that are children of thes block\n*/\n\nimport { HTMLElement, NodeListOfHTMLElement } from \"../../../../Types\"\n\nlet eventListenersAdded: Set<HTMLElement> = new Set();\n\nexport function makeBlockAccessible(blockId: string, blockItemsClass: string) {\n    console.log('Block makeBlockAccessible initiated')\n}","import { updateSingleCheckboxAriaAttributes } from \"./src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes\";\nimport { updateGroupCheckboxesAriaAttributes } from \"./src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes\";\n\nexport { updateSingleCheckboxAriaAttributes, updateGroupCheckboxesAriaAttributes }","/**\n * Adds screen reader accessibility to a single checkbox. Updates the aria attributes of the checkbox. Checkbox element must possess the following aria attributes; aria-checked and aria-label.\n * @param {string} checkboxClass The shared class of all the checkboxes\n * @param {string} updatedAriaLabel The aria label to be updated to checkbox element\n */\n\nimport { HTMLElement } from \"../../../../../Types\";\n\nexport function updateSingleCheckboxAriaAttributes(checkboxClass: string, updatedAriaLabel: string): void {\n    console.log('Checkbox updateSingleCheckboxAriaAttributes initiated');\n}","/**\n * Adds screen reader accessibility to multiple checkboxes. Updates the aria attributes of the checkboxes. Checkbox elements must possess the following aria attributes; aria-checked and aria-label.\n * @param {CheckboxStates[]} checkboxStates Array of objects containing checkboxes state information\n * @param {string} checkboxesClass The shared class of all the checkboxes\n * @param {number} currentPressedCheckboxIndex Index of the currently checked or unchecked checkbox\n */\n\nimport { HTMLElement, CheckboxStates } from \"../../../../../Types\";\n\nexport function updateGroupCheckboxesAriaAttributes(checkboxStates: CheckboxStates[], checkboxesClass: string, currentPressedCheckboxIndex: number): void {\n    console.log('Checkbox updateGroupCheckboxesAriaAttributes initiated');\n}","import { cleanUpMenuEventListeners } from \"./src/cleanUpMenuEventListeners/cleanUpMenuEventListeners\";\nimport { makeMenuAccessible } from \"./src/makeMenuAccessible/makeMenuAccessible\";\nimport { updateMenuTriggerAriaAttributes } from \"./src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes\";\n\nexport { cleanUpMenuEventListeners, makeMenuAccessible, updateMenuTriggerAriaAttributes }","import { NodeListOfHTMLElement } from \"../../../../Types\";\n\n\nexport function cleanUpMenuEventListeners(menuId: string, menuItemsClass: string): void {\n    console.log('Menu cleanUpMenuEventListeners initiated');\n}","/**\n * Adds keyboard interaction to toggle menu. The menu traps focus and can be interacted with using the keyboard. The first item of the menu has focus when menu appears.\n * @param {string} menuId The id of the menu\n * @param {string} menuItemsClass The shared class of the items that are children of the menu\n*/\n\nimport { HTMLElement, NodeListOfHTMLElement } from '../../../../Types'\n\nlet eventListenersAdded: Set<HTMLElement> = new Set();\n\nexport function makeMenuAccessible(menuId: string, menuItemsClass: string): void {\n    console.log('Menu makeMenuAccessible initiated');\n}","/**\n * Adds screen reader accessibility to menus. Updates the aria attributes of the menu trigger button. Trigger button element must possess the following aria attributes; aria-expanded and aria-label.\n * @param {string} triggerId The id of the trigger button that toggles the menu\n * @param {string} ariaLabel The aria label to be updated to trigger element\n */\n\nimport { HTMLElement } from \"../../../../Types\";\n\nexport function updateMenuTriggerAriaAttributes(triggerId: string, ariaLabel: string): void {\n    console.log('Menu updateMenuTriggerAriaAttributes initiated');\n}"]}