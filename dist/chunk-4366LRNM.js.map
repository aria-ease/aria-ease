{"version":3,"sources":["/Users/macx/aria-ease/package/dist/chunk-4366LRNM.js","../src/block/src/makeBlockAccessible/makeBlockAccessible.ts"],"names":["handleKeyPress","index"],"mappings":"AAAA,SAASA,cAAc,QAAQ,sBAAsB;2EC4B0BC,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;2EAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;2EAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;2EAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;mFAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;iFAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;6EAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;2EAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;8FAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;4FAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;wFAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;sFAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;4EAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;wEAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;0DAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;uDAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA;iDAAAA,GAAAA,EAAAA,CAAAA;yCAAAA,GAAAA,EAAAA,CAAAA;2BAAAA,GAAAA,EAAAA,CAAAA,MAAAA,EAAAA,CAAAA,MAAAA,EAAAA,OAAAA","sourcesContent":["import { handleKeyPress } from './chunk-RT5IROW4.js';\n\n// src/block/src/makeBlockAccessible/makeBlockAccessible.ts\nvar eventListenersMap = /* @__PURE__ */ new Map();\nfunction makeBlockAccessible(blockId, blockElementsClass) {\n  const blockDiv = document.querySelector(`#${blockId}`);\n  if (!blockDiv) {\n    throw new Error(\"Invalid block main div id provided.\");\n  }\n  const blockItems = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n  if (!blockItems) {\n    throw new Error(\"Invalid block items shared class provided.\");\n  }\n  blockItems.forEach((blockItem) => {\n    if (!eventListenersMap.has(blockItem)) {\n      blockItem.addEventListener(\"keydown\", (event) => {\n        const items = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n        const index = Array.prototype.indexOf.call(items, blockItem);\n        handleKeyPress(event, items, index);\n        const handler = (event2) => handleKeyPress(event2, items, index);\n        eventListenersMap.set(blockItem, handler);\n      });\n    }\n  });\n  return function cleanUpBlockEventListeners() {\n    blockItems.forEach((blockItem, blockItemIndex) => {\n      if (eventListenersMap.has(blockItem)) {\n        blockItem.removeEventListener(\"keydown\", (event) => handleKeyPress(event, blockItems, blockItemIndex));\n        eventListenersMap.delete(blockItem);\n      }\n    });\n  };\n}\n\nexport { makeBlockAccessible };\n//# sourceMappingURL=chunk-4366LRNM.js.map\n","/** \n * Adds keyboard interaction to block. The block traps focus and can be interacted with using the keyboard.\n * @param {string} blockId The id of the block container.\n * @param {string} blockElementsClass The shared class of the elements that are children of the block.\n*/\n\nimport { HTMLElement, NodeListOfHTMLElement } from \"../../../../Types\"\nimport { handleKeyPress } from \"../../../utils/handleKeyPress/handleKeyPress\";\n\nconst eventListenersMap = new Map<HTMLElement, (event: KeyboardEvent) => void>();\n\nexport function makeBlockAccessible(blockId: string, blockElementsClass: string) {\n  const blockDiv: HTMLElement = document.querySelector(`#${blockId}`) as HTMLElement\n  if(!blockDiv) {\n    throw new Error(\"Invalid block main div id provided.\")\n  }\n\n  const blockItems: NodeListOfHTMLElement = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n  if(!blockItems) {\n    throw new Error(\"Invalid block items shared class provided.\")\n  }\n\n  blockItems.forEach((blockItem: HTMLElement): void => {\n    if (!eventListenersMap.has(blockItem)) {\n      blockItem.addEventListener(\"keydown\", (event: KeyboardEvent) => {\n        const items = blockDiv.querySelectorAll(`.${blockElementsClass}`) as NodeListOf<HTMLElement>;\n        const index = Array.prototype.indexOf.call(items, blockItem);\n        handleKeyPress(event, items, index);\n        const handler = (event: KeyboardEvent) => handleKeyPress(event, items, index);\n        eventListenersMap.set(blockItem, handler);\n      });\n      \n    }\n  });\n\n\n\n  return function cleanUpBlockEventListeners(): void {\n    blockItems.forEach((blockItem: HTMLElement, blockItemIndex: number): void => {\n      if (eventListenersMap.has(blockItem)) {\n        blockItem.removeEventListener(\"keydown\", (event: KeyboardEvent) => handleKeyPress(event, blockItems, blockItemIndex));\n        eventListenersMap.delete(blockItem);\n      }\n    });\n  };\n}"]}