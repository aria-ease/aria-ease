{"version":3,"sources":["/Users/macx/aria-ease/package/dist/chunk-4366LRNM.js","../src/block/src/makeBlockAccessible/makeBlockAccessible.ts"],"names":["handleKeyPress","blockDiv","document","querySelector","blockId","Error","blockItems","querySelectorAll","blockElementsClass","forEach","blockItem","eventListenersMap","has","addEventListener","event","items","index","Array","prototype","indexOf","call","handler","set","cleanUpBlockEventListeners","blockItemIndex","removeEventListener"],"mappings":"AAAA,SAASA,cAAc,QAAQ,sBAAsB;ICYnD,IAAMC,CAAAA,UAAwBC,KAAAA,IAASC,CAAAA,OAAAA,CAAAA,CAAAA,EAAAA,CAAA,CAAc,EAAA,EAAW,OAAPC,GAAAA,GAAAA;MACzD,EAAG,CAACH,UAAU,KAAA,IAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,OAAA,GAAA;UACZ,MAAM,GAAA,CAAII,MAAM,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,IAAA,OAAA,GAAA;UAClB,MAAA,GAAA,CAAA,MAAA,EAAA,aAAA,CAAA,IAAA,OAAA;YAEA,IAAMC,GAAAA,CAAAA,MAAAA,GAAoCL,SAASM,gBAAA,CAAiB,IAAsB,OAAlBC;YACxE,EAAG,CAACF,GAAAA,MAAAA,GAAY,SAAA,gBAAA,CAAA,IAAA,OAAA;YACd,MAAM,IAAID,CAAAA,KAAM,IAAA,gBAAA,CAAA,IAAA,OAAA;UAClB,MAAA,IAAA,CAAA,KAAA,IAAA,gBAAA,CAAA,IAAA,OAAA;YAEAC,IAAAA,IAAAA,CAAAA,EAAWG,GAAAA,IAAA,CAAQ,SAACC;gBAClB,EAAA,EAAI,CAACC,GAAAA,IAAAA,CAAAA,SAAAA,SAAkBC,GAAA,CAAIF,YAAY;oBACrCA,IAAAA,CAAAA,SAAAA,IAAUG,KAAAA,GAAAA,CAAAA,OAAA,CAAiB,IAAA,OAAW,SAACC;oCACrC,IAAMC,CAAAA,GAAAA,CAAAA,GAAQd,IAAAA,CAAAA,IAASM,OAAAA,SAAAA,QAAA,CAAiB,IAAsB,OAAlBC;gCAC5C,EAAA,CAAA,CAAMQ,EAAAA,IAAAA,CAAAA,CAAQC,GAAAA,GAAMC,IAAAA,SAAAA,IAAA,CAAUC,GAAAA,CAAAA,EAAA,EAAoBT,OAAZU,IAAA,CAAKL,OAAOL;kCAClDV,IAAAA,CAAAA,CAAAA,GAAAA,GAAAA,GAAec,CAAAA,SAAAA,IAAAA,CAAOC,GAAAA,CAAAA,EAAOC,EAAAA,OAAAA,IAAAA,CAAAA,OAAAA;oCAC7B,CAAA,GAAMK,GAAAA,MAAAA,CAAU,GAAA,CAAA,EAAA,EAACP,OAAD,CAACA,GAAAA,CAAAA,OAAAA;uDAAyBd,CAAAA,CAAAA,OAAAA;iDAAAA,MAAec;yCAAAA,KAAOC,CAAAA;2BAAAA,GAAOC,EAAAA,CAAAA,MAAAA,EAAAA,CAAAA,MAAAA,EAAAA,OAAAA;;;;;4BACvEL,kBAAkBW,GAAA,CAAIZ,WAAWW;oBACnC;gBAEF,GAAA,KAAA,EAAA,CAAA,SAAA,WAAA;gBACF,KAAA,IAAA,KAAA,EAAA,CAAA,CAAA,GAAA,CAAA,IAAA,QAAA,GAAA;sBAIA,EAAA,EAAA,GAAO,IAAA,KAASE,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,IAAAA,OAAAA,SAAAA,GAAAA;2BAAAA,eAAAA,OAAAA,YAAAA;;8BACdjB,EAAAA,EAAAA,MAAAA,CAAWG,OAAA,CAAQ,CAAA,GAAA,CAAA,IAACC,OAAAA,SAAAA,GAAwBc;iCAAAA,eAAAA,OAAAA,YAAAA;;8BAC1C,IAAIb,EAAAA,MAAAA,CAAAA,SAAkBC,GAAA,CAAIF,WAAAA,SAAY;iCAAA,eAAA,OAAA,YAAA;0BACpCA,EAAAA,GAAAA,KAAUe,MAAAA,CAAAA,YAAA,CAAoB,SAAqCzB,EAA1B,OAA0BA,EAAzBc,IAAwCA,OAAOR,YAAYkB","sourcesContent":["import { handleKeyPress } from './chunk-RT5IROW4.js';\n\n// src/block/src/makeBlockAccessible/makeBlockAccessible.ts\nvar eventListenersMap = /* @__PURE__ */ new Map();\nfunction makeBlockAccessible(blockId, blockElementsClass) {\n  const blockDiv = document.querySelector(`#${blockId}`);\n  if (!blockDiv) {\n    throw new Error(\"Invalid block main div id provided.\");\n  }\n  const blockItems = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n  if (!blockItems) {\n    throw new Error(\"Invalid block items shared class provided.\");\n  }\n  blockItems.forEach((blockItem) => {\n    if (!eventListenersMap.has(blockItem)) {\n      blockItem.addEventListener(\"keydown\", (event) => {\n        const items = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n        const index = Array.prototype.indexOf.call(items, blockItem);\n        handleKeyPress(event, items, index);\n        const handler = (event2) => handleKeyPress(event2, items, index);\n        eventListenersMap.set(blockItem, handler);\n      });\n    }\n  });\n  return function cleanUpBlockEventListeners() {\n    blockItems.forEach((blockItem, blockItemIndex) => {\n      if (eventListenersMap.has(blockItem)) {\n        blockItem.removeEventListener(\"keydown\", (event) => handleKeyPress(event, blockItems, blockItemIndex));\n        eventListenersMap.delete(blockItem);\n      }\n    });\n  };\n}\n\nexport { makeBlockAccessible };\n//# sourceMappingURL=chunk-4366LRNM.js.map\n","/** \n * Adds keyboard interaction to block. The block traps focus and can be interacted with using the keyboard.\n * @param {string} blockId The id of the block container.\n * @param {string} blockElementsClass The shared class of the elements that are children of the block.\n*/\n\nimport { HTMLElement, NodeListOfHTMLElement } from \"../../../../Types\"\nimport { handleKeyPress } from \"../../../utils/handleKeyPress/handleKeyPress\";\n\nconst eventListenersMap = new Map<HTMLElement, (event: KeyboardEvent) => void>();\n\nexport function makeBlockAccessible(blockId: string, blockElementsClass: string) {\n  const blockDiv: HTMLElement = document.querySelector(`#${blockId}`) as HTMLElement\n  if(!blockDiv) {\n    throw new Error(\"Invalid block main div id provided.\")\n  }\n\n  const blockItems: NodeListOfHTMLElement = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n  if(!blockItems) {\n    throw new Error(\"Invalid block items shared class provided.\")\n  }\n\n  blockItems.forEach((blockItem: HTMLElement): void => {\n    if (!eventListenersMap.has(blockItem)) {\n      blockItem.addEventListener(\"keydown\", (event: KeyboardEvent) => {\n        const items = blockDiv.querySelectorAll(`.${blockElementsClass}`) as NodeListOf<HTMLElement>;\n        const index = Array.prototype.indexOf.call(items, blockItem);\n        handleKeyPress(event, items, index);\n        const handler = (event: KeyboardEvent) => handleKeyPress(event, items, index);\n        eventListenersMap.set(blockItem, handler);\n      });\n      \n    }\n  });\n\n\n\n  return function cleanUpBlockEventListeners(): void {\n    blockItems.forEach((blockItem: HTMLElement, blockItemIndex: number): void => {\n      if (eventListenersMap.has(blockItem)) {\n        blockItem.removeEventListener(\"keydown\", (event: KeyboardEvent) => handleKeyPress(event, blockItems, blockItemIndex));\n        eventListenersMap.delete(blockItem);\n      }\n    });\n  };\n}"]}