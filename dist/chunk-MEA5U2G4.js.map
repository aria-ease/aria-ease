{"version":3,"sources":["/Users/macx/aria-ease/package/dist/chunk-MEA5U2G4.js","../src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts"],"names":["updateAccordionTriggerAriaAttributes","accordionId","accordionTriggersClass","accordionStates","clickedTriggerIndex","accordionDiv","document","querySelector","Error","accordionItems","Array","from","querySelectorAll","length","forEach","accordionItem","index","state","expanded","getAttribute","shouldBeExpanded","display","setAttribute"],"mappings":"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","sourcesContent":["// src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts\nfunction updateAccordionTriggerAriaAttributes(accordionId, accordionTriggersClass, accordionStates, clickedTriggerIndex) {\n  const accordionDiv = document.querySelector(`#${accordionId}`);\n  if (!accordionDiv) {\n    throw new Error(\"Invalid accordion main div id provided.\");\n  }\n  const accordionItems = Array.from(accordionDiv.querySelectorAll(`.${accordionTriggersClass}`));\n  if (accordionItems.length === 0) {\n    throw new Error(\"Invalid accordion items shared class provided.\");\n  }\n  if (accordionItems.length !== accordionStates.length) {\n    throw new Error(`Accordion state/DOM length mismatch: found ${accordionItems.length} triggers, but got ${accordionStates.length} state objects.`);\n  }\n  accordionItems.forEach((accordionItem, index) => {\n    const state = accordionStates[index];\n    const expanded = accordionItem.getAttribute(\"aria-expanded\");\n    const shouldBeExpanded = index === clickedTriggerIndex ? state.display ? \"true\" : \"false\" : \"false\";\n    if (expanded && expanded !== shouldBeExpanded) {\n      accordionItem.setAttribute(\"aria-expanded\", shouldBeExpanded);\n    }\n  });\n}\n\nexport { updateAccordionTriggerAriaAttributes };\n//# sourceMappingURL=chunk-MEA5U2G4.js.map\n","/**\n * Adds screen reader accessibility to accordions. Updates the aria attributes of the accordion trigger button. Trigger button element must possess the following aria attributes; aria-expanded, aria-controls, aria-label (for only non-text triggers).\n * @param {string} accordionId The id of the accordion triggers parent container.\n * @param {string} accordionTriggersClass The shared class of all the accordion triggers.\n * @param {AccordionStates[]} accordionStates Array of objects containing accordions state information.\n * @param {number} clickedTriggerIndex Index of the currently clicked accordion trigger within the accordion div container.\n*/\n\nimport { HTMLElement, AccordionStates } from \"../../../../Types\";\n\nexport function updateAccordionTriggerAriaAttributes(accordionId: string, accordionTriggersClass: string, accordionStates: AccordionStates[], clickedTriggerIndex: number): void {\n    const accordionDiv: HTMLElement | null = document.querySelector(`#${accordionId}`);\n    if (!accordionDiv) {\n        throw new Error(\"Invalid accordion main div id provided.\");\n    }\n\n    const accordionItems: HTMLElement[] = Array.from(accordionDiv.querySelectorAll(`.${accordionTriggersClass}`));\n    if (accordionItems.length === 0) {\n        throw new Error(\"Invalid accordion items shared class provided.\");\n    }\n\n    if (accordionItems.length !== accordionStates.length) {\n        throw new Error(`Accordion state/DOM length mismatch: found ${accordionItems.length} triggers, but got ${accordionStates.length} state objects.`);\n    }\n\n    accordionItems.forEach((accordionItem: HTMLElement, index: number) => {\n        const state = accordionStates[index];\n        const expanded = accordionItem.getAttribute(\"aria-expanded\");\n        const shouldBeExpanded = index === clickedTriggerIndex ? (state.display ? \"true\" : \"false\") : \"false\";\n        if (expanded && expanded !== shouldBeExpanded) {\n            accordionItem.setAttribute(\"aria-expanded\", shouldBeExpanded);\n        }\n    });\n}"]}