{"version":3,"sources":["/Users/macx/aria-ease/package/dist/index.js","../src/accordion/index.ts","../src/block/index.ts","../src/checkbox/index.ts","../src/checkbox/src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes.ts","../src/checkbox/src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes.ts","../src/menu/index.ts"],"names":["accordion_exports","__export","updateAccordionTriggerAriaAttributes","block_exports","makeBlockAccessible","updateGroupCheckboxesAriaAttributes","updateSingleCheckboxAriaAttributes","checkboxesClass","currentPressedCheckboxIndex","cleanUpMenuEventListeners"],"mappings":"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","sourcesContent":["'use strict';\n\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/accordion/index.ts\nvar accordion_exports = {};\n__export(accordion_exports, {\n  updateAccordionTriggerAriaAttributes: () => updateAccordionTriggerAriaAttributes\n});\n\n// src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts\nfunction updateAccordionTriggerAriaAttributes(accordionStates, accordionsClass, currentClickedTriggerIndex) {\n  console.log(\"Accordion updateAccordionTriggerAriaAttributes initiated\");\n}\n\n// src/block/index.ts\nvar block_exports = {};\n__export(block_exports, {\n  makeBlockAccessible: () => makeBlockAccessible\n});\n\n// src/block/src/makeBlockAccessible/makeBlockAccessible.ts\nfunction makeBlockAccessible(blockId, blockItemsClass) {\n  console.log(\"Block makeBlockAccessible initiated\");\n}\n\n// src/checkbox/index.ts\nvar checkbox_exports = {};\n__export(checkbox_exports, {\n  updateGroupCheckboxesAriaAttributes: () => updateGroupCheckboxesAriaAttributes,\n  updateSingleCheckboxAriaAttributes: () => updateSingleCheckboxAriaAttributes\n});\n\n// src/checkbox/src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes.ts\nfunction updateSingleCheckboxAriaAttributes(checkboxClass, updatedAriaLabel) {\n  console.log(\"Checkbox updateSingleCheckboxAriaAttributes initiated\");\n}\n\n// src/checkbox/src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes.ts\nfunction updateGroupCheckboxesAriaAttributes(checkboxStates, checkboxesClass, currentPressedCheckboxIndex) {\n  console.log(\"Checkbox updateGroupCheckboxesAriaAttributes initiated\");\n}\n\n// src/menu/index.ts\nvar menu_exports = {};\n__export(menu_exports, {\n  cleanUpMenuEventListeners: () => cleanUpMenuEventListeners,\n  makeMenuAccessible: () => makeMenuAccessible,\n  updateMenuTriggerAriaAttributes: () => updateMenuTriggerAriaAttributes\n});\n\n// src/menu/src/cleanUpMenuEventListeners/cleanUpMenuEventListeners.ts\nfunction cleanUpMenuEventListeners(menuId, menuItemsClass) {\n  console.log(\"Menu cleanUpMenuEventListeners initiated\");\n}\n\n// src/menu/src/makeMenuAccessible/makeMenuAccessible.ts\nfunction makeMenuAccessible(menuId, menuItemsClass) {\n  console.log(\"Menu makeMenuAccessible initiated\");\n}\n\n// src/menu/src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes.ts\nfunction updateMenuTriggerAriaAttributes(triggerId, ariaLabel) {\n  console.log(\"Menu updateMenuTriggerAriaAttributes initiated\");\n}\n\n// src/radio/index.ts\nvar radio_exports = {};\n__export(radio_exports, {\n  updateGroupRadiosAriaAttributes: () => updateGroupRadiosAriaAttributes,\n  updateSingleRadioAriaAttributes: () => updateSingleRadioAriaAttributes\n});\n\n// src/radio/src/single-radio/updateSingleRadioAriaAttributes.ts\nfunction updateSingleRadioAriaAttributes(radioClass) {\n  console.log(\"Radio updateSingleRadioAriaAttributes initiated\");\n}\n\n// src/radio/src/group-radio/updateGroupRadiosAriaAttributes.ts\nfunction updateGroupRadiosAriaAttributes(radioStates, radiosClass, currentPressedRadioIndex) {\n  console.log(\"Radio updateGroupRadiosAriaAttributes initiated\");\n}\n\n// src/toggle/index.ts\nvar toggle_exports = {};\n__export(toggle_exports, {\n  updateGroupTogglesAriaAttributes: () => updateGroupTogglesAriaAttributes,\n  updateSingleToggleAriaAttributes: () => updateSingleToggleAriaAttributes\n});\n\n// src/toggle/src/single-toggle/updateSingleToggleAriaAttributes.ts\nfunction updateSingleToggleAriaAttributes(toggleClass) {\n  console.log(\"Toggle updateSingleToggleAriaAttributes initiated\");\n}\n\n// src/toggle/src/group-toggle/updateGroupTogglesAriaAttributes.ts\nfunction updateGroupTogglesAriaAttributes(toggleStates, togglesClass, currentPressedToggleIndex) {\n  console.log(\"Toggle updateGroupTogglesAriaAttributes initiated\");\n}\n\nexports.Accordion = accordion_exports;\nexports.Block = block_exports;\nexports.Checkbox = checkbox_exports;\nexports.Menu = menu_exports;\nexports.Radio = radio_exports;\nexports.Toggle = toggle_exports;\n//# sourceMappingURL=index.js.map\n","import { updateAccordionTriggerAriaAttributes } from './src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes';\n\nexport { updateAccordionTriggerAriaAttributes }","import { makeBlockAccessible } from \"./src/makeBlockAccessible/makeBlockAccessible\";\n\nexport { makeBlockAccessible }","import { updateSingleCheckboxAriaAttributes } from \"./src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes\";\nimport { updateGroupCheckboxesAriaAttributes } from \"./src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes\";\n\nexport { updateSingleCheckboxAriaAttributes, updateGroupCheckboxesAriaAttributes }","/**\n * Adds screen reader accessibility to a single checkbox. Updates the aria attributes of the checkbox. Checkbox element must possess the following aria attributes; aria-checked and aria-label.\n * @param {string} checkboxClass The shared class of all the checkboxes\n * @param {string} updatedAriaLabel The aria label to be updated to checkbox element\n */\n\nimport { HTMLElement } from \"../../../../../Types\";\n\nexport function updateSingleCheckboxAriaAttributes(checkboxClass: string, updatedAriaLabel: string): void {\n    console.log('Checkbox updateSingleCheckboxAriaAttributes initiated');\n}","/**\n * Adds screen reader accessibility to multiple checkboxes. Updates the aria attributes of the checkboxes. Checkbox elements must possess the following aria attributes; aria-checked and aria-label.\n * @param {CheckboxStates[]} checkboxStates Array of objects containing checkboxes state information\n * @param {string} checkboxesClass The shared class of all the checkboxes\n * @param {number} currentPressedCheckboxIndex Index of the currently checked or unchecked checkbox\n */\n\nimport { HTMLElement, CheckboxStates } from \"../../../../../Types\";\n\nexport function updateGroupCheckboxesAriaAttributes(checkboxStates: CheckboxStates[], checkboxesClass: string, currentPressedCheckboxIndex: number): void {\n    console.log('Checkbox updateGroupCheckboxesAriaAttributes initiated');\n}","import { cleanUpMenuEventListeners } from \"./src/cleanUpMenuEventListeners/cleanUpMenuEventListeners\";\nimport { makeMenuAccessible } from \"./src/makeMenuAccessible/makeMenuAccessible\";\nimport { updateMenuTriggerAriaAttributes } from \"./src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes\";\n\nexport { cleanUpMenuEventListeners, makeMenuAccessible, updateMenuTriggerAriaAttributes }"]}