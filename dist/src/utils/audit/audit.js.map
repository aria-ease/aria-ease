{"version":3,"sources":["/Users/macx/aria-ease/package/dist/src/utils/audit/audit.js","../../../../src/utils/audit/audit.ts"],"names":[],"mappings":"","sourcesContent":["import AxeBuilder from '@axe-core/playwright';\nimport { chromium } from 'playwright';\n\n// src/utils/audit/audit.ts\nasync function runAudit() {\n  const browser = await chromium.launch({ headless: true });\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  await page.goto(\"http://localhost:5173/\");\n  try {\n    const axe = new AxeBuilder({ page });\n    const axeResults = await axe.analyze();\n    console.log(\"--- AXE-CORE RESULTS ---\");\n    console.log(axeResults);\n    const snapshot = await page.accessibility.snapshot();\n    console.log(\"\\n--- PLAYWRIGHT SNAPSHOT ---\");\n    console.log(snapshot);\n  } catch (error) {\n    console.log(error);\n  }\n  await browser.close();\n}\n\nexport { runAudit };\n//# sourceMappingURL=audit.js.map\n","import AxeBuilder from \"@axe-core/playwright\";\nimport { chromium } from \"playwright\";\nimport { AxeResults } from \"Types\";\n\nexport async function runAudit(url: string) {\n    let browser;\n\n    try{ \n        browser = await chromium.launch({ headless: true });\n        const context = await browser.newContext();\n        const page = await context.newPage();\n        await page.goto(url, { waitUntil: 'networkidle' });\n        const axe = new AxeBuilder({ page });\n        const axeResults: AxeResults = await axe.analyze();\n        return axeResults;\n    } catch(error: unknown) {\n        if (error instanceof Error) {\n            if (error.message.includes(\"Executable doesn't exist\")) {\n                console.error('\\n‚ùå Playwright browsers not found!\\n');\n                console.log('üì¶ First-time setup required:');\n                console.log('   Run: npx playwright install chromium\\n');\n                console.log('üí° This downloads the browser needed for auditing (~200MB)');\n                console.log('   You only need to do this once.\\n');\n            } else if(error.message.includes(\"page.goto: net::ERR_CONNECTION_REFUSED\")) {\n                console.error('\\n‚ùå Server Not Running!\\n');\n                console.log('   Make sure your server is running before auditing URL');\n                console.log('   Run: npm run dev # or your start command');\n            } else if(error.message.includes(\"page.goto: Protocol error (Page.navigate): Cannot navigate to invalid URL\")) {\n                console.error('\\n‚ùå Cannot audit invalid URL\\n')\n            } else {\n                console.error('‚ùå Audit error:', error.message);\n                console.log('   Make sure you provide a valid URL');\n            }\n        } else {\n            console.error('‚ùå Audit error (non-Error):', String(error));\n        }\n        throw error;\n    } finally {\n        if(browser) await browser.close(); \n    }\n}"]}