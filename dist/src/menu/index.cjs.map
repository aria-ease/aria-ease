{"version":3,"sources":["/Users/macx/aria-ease/package/dist/src/menu/index.cjs","../../../src/utils/handleKeyPress/handleKeyPress.ts","../../../src/menu/src/makeMenuAccessible/makeMenuAccessible.ts"],"names":["type","el","includes","isTextArea","tagName","isNativeButton","isLink","moveFocus","elementItems","currentIndex","direction","len","length","nextIndex","item","focus","isClickableButNotSemantic","getAttribute","handleMenuEscapeKeyPress","menuElement","menuTriggerButton","style","display","menuTriggerButtonId","Error","setAttribute","handleKeyPress","event","elementItemIndex","menuElementDiv","triggerButton","currentEl","key","isTextInput","preventDefault","cursorStart","selectionStart","value","cursorEnd","getComputedStyle","click","makeMenuAccessible","menuId","menuElementsClass","triggerId","menuDiv","document","querySelector","handlerMap","Map","setAria","isOpen"],"mappings":"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","sourcesContent":["'use strict';\n\n// src/utils/handleKeyPress/handleKeyPress.ts\nfunction isTextInput(el) {\n  if (el.tagName !== \"INPUT\") return false;\n  const type = el.type;\n  return [\"text\", \"email\", \"password\", \"tel\", \"number\"].includes(type);\n}\nfunction isTextArea(el) {\n  return el.tagName === \"TEXTAREA\";\n}\nfunction isNativeButton(el) {\n  return el.tagName === \"BUTTON\" || el.tagName === \"INPUT\" && [\"button\", \"submit\", \"reset\"].includes(el.type);\n}\nfunction isLink(el) {\n  return el.tagName === \"A\";\n}\nfunction moveFocus(elementItems, currentIndex, direction) {\n  const len = elementItems.length;\n  const nextIndex = (currentIndex + direction + len) % len;\n  elementItems.item(nextIndex).focus();\n}\nfunction isClickableButNotSemantic(el) {\n  return el.getAttribute(\"data-custom-click\") !== null || el.getAttribute(\"data-custom-click\") !== void 0;\n}\nfunction handleMenuEscapeKeyPress(menuElement, menuTriggerButton) {\n  menuElement.style.display = \"none\";\n  const menuTriggerButtonId = menuTriggerButton.getAttribute(\"id\");\n  if (!menuTriggerButtonId) {\n    throw new Error(\"Menu trigger button does not have id attribute\");\n  }\n  menuTriggerButton.setAttribute(\"aria-expanded\", \"false\");\n}\nfunction handleKeyPress(event, elementItems, elementItemIndex, menuElementDiv, triggerButton) {\n  const currentEl = elementItems.item(elementItemIndex);\n  switch (event.key) {\n    case \"ArrowUp\":\n    case \"ArrowLeft\": {\n      if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n        event.preventDefault();\n        moveFocus(elementItems, elementItemIndex, -1);\n      } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n        const cursorStart = currentEl.selectionStart;\n        if (cursorStart === 0) {\n          event.preventDefault();\n          moveFocus(elementItems, elementItemIndex, -1);\n        }\n      }\n      break;\n    }\n    case \"ArrowDown\":\n    case \"ArrowRight\": {\n      if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n        event.preventDefault();\n        moveFocus(elementItems, elementItemIndex, 1);\n      } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n        const value = currentEl.value;\n        const cursorEnd = currentEl.selectionStart;\n        if (cursorEnd === value.length) {\n          event.preventDefault();\n          moveFocus(elementItems, elementItemIndex, 1);\n        }\n      }\n      break;\n    }\n    case \"Escape\": {\n      event.preventDefault();\n      if (menuElementDiv && triggerButton) {\n        if (getComputedStyle(menuElementDiv).display === \"block\") {\n          handleMenuEscapeKeyPress(menuElementDiv, triggerButton);\n        }\n        triggerButton.focus();\n      }\n      break;\n    }\n    case \"Enter\":\n    case \" \": {\n      if (!isNativeButton(currentEl) && !isLink(currentEl) && isClickableButNotSemantic(currentEl)) {\n        event.preventDefault();\n        currentEl.click();\n      }\n      break;\n    }\n  }\n}\n\n// src/menu/src/makeMenuAccessible/makeMenuAccessible.ts\nfunction makeMenuAccessible({ menuId, menuElementsClass, triggerId }) {\n  const menuDiv = document.querySelector(`#${menuId}`);\n  if (!menuDiv) throw new Error(\"Invalid menu div id provided\");\n  const triggerButton = document.querySelector(`#${triggerId}`);\n  if (!triggerButton) throw new Error(\"Invalid trigger button id provided\");\n  const handlerMap = /* @__PURE__ */ new Map();\n  function setAria(isOpen) {\n    triggerButton.setAttribute(\"aria-expanded\", isOpen ? \"true\" : \"false\");\n  }\n  function addListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    menuItems.forEach((menuItem, index) => {\n      if (!handlerMap.has(menuItem)) {\n        const handler = (event) => handleKeyPress(event, menuItems, index, menuDiv, triggerButton);\n        menuItem.addEventListener(\"keydown\", handler);\n        handlerMap.set(menuItem, handler);\n      }\n    });\n  }\n  function removeListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    menuItems.forEach((menuItem) => {\n      const handler = handlerMap.get(menuItem);\n      if (handler) {\n        menuItem.removeEventListener(\"keydown\", handler);\n        handlerMap.delete(menuItem);\n      }\n    });\n  }\n  function openMenu() {\n    menuDiv.style.display = \"block\";\n    setAria(true);\n    addListeners();\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    if (menuItems.length > 0) menuItems[0].focus();\n  }\n  function closeMenu() {\n    removeListeners();\n    menuDiv.style.display = \"none\";\n    setAria(false);\n    triggerButton.focus();\n  }\n  function cleanup() {\n    removeListeners();\n  }\n  return { openMenu, closeMenu, cleanup };\n}\n\nexports.makeMenuAccessible = makeMenuAccessible;\n//# sourceMappingURL=index.cjs.map\n","import { NodeListOfHTMLElement, HTMLElement } from \"../../../Types\";\n\n\nfunction isTextInput(el: HTMLElement): boolean {\n    if (el.tagName !== 'INPUT') return false;\n    const type = (el as HTMLInputElement).type;\n    return ['text', 'email', 'password', 'tel', 'number'].includes(type);\n}\n\nfunction isTextArea(el: HTMLElement): boolean {\n    return el.tagName === 'TEXTAREA';\n}\n\nexport function isNativeButton(el: HTMLElement): boolean {\n    return el.tagName === 'BUTTON' || (el.tagName === 'INPUT' && ['button', 'submit', 'reset'].includes((el as HTMLInputElement).type));\n}\n\nexport function isLink(el: HTMLElement): boolean {\n    return el.tagName === 'A';\n}\n\nfunction moveFocus(elementItems: NodeListOfHTMLElement, currentIndex: number, direction: -1 | 1) {\n    const len = elementItems.length;\n    const nextIndex = (currentIndex + direction + len) % len;\n    elementItems.item(nextIndex).focus();\n}\n\nfunction isClickableButNotSemantic(el: HTMLElement): boolean {\n    return el.getAttribute(\"data-custom-click\") !== null || el.getAttribute(\"data-custom-click\") !== undefined;\n}\n\nfunction handleMenuEscapeKeyPress(menuElement: HTMLElement, menuTriggerButton: HTMLElement) {\n    menuElement.style.display = 'none';\n    const menuTriggerButtonId = menuTriggerButton.getAttribute('id');\n    if (!menuTriggerButtonId) {\n        throw new Error(\"Menu trigger button does not have id attribute\");\n    }\n    menuTriggerButton.setAttribute(\"aria-expanded\", \"false\");\n}\n\nexport function handleKeyPress(\n    event: KeyboardEvent,\n    elementItems: NodeListOfHTMLElement,\n    elementItemIndex: number,\n    menuElementDiv?: HTMLElement,\n    triggerButton?: HTMLElement\n): void {\n    const currentEl = elementItems.item(elementItemIndex);\n    switch (event.key) {\n        case 'ArrowUp':\n        case 'ArrowLeft': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, -1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const cursorStart = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (cursorStart === 0) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, -1);\n                }\n            }\n            break;\n        }\n        case 'ArrowDown':\n        case 'ArrowRight': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, 1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const value = (currentEl as HTMLInputElement | HTMLTextAreaElement).value;\n                const cursorEnd = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (cursorEnd === value.length) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, 1);\n                }\n            }\n            break;\n        }\n        case 'Escape': {\n            event.preventDefault();\n            if (menuElementDiv && triggerButton) {\n                if (getComputedStyle(menuElementDiv).display === 'block') {\n                    handleMenuEscapeKeyPress(menuElementDiv, triggerButton);\n                }\n                triggerButton.focus();\n            }\n            break;\n        }\n        case 'Enter':\n        case ' ': {\n            if (!isNativeButton(currentEl) && !isLink(currentEl) && isClickableButNotSemantic(currentEl)) {\n                event.preventDefault();\n                currentEl.click();\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}","/**\n  * Adds keyboard interaction to toggle menu. The menu traps focus and can be interacted with using the keyboard. The first interactive item of the menu has focus when menu open.\n  * @param {string} menuId - The id of the menu.\n  * @param {string} menuElementsClass - The class of the items that are children of the menu.\n  * @param {string} triggerId - The id of the button that triggers the menu.\n*/\n\nimport { handleKeyPress } from \"../../../utils/handleKeyPress/handleKeyPress\";\nimport { NodeListOfHTMLElement } from \"../../../../Types\";\n\nexport function makeMenuAccessible({ menuId, menuElementsClass, triggerId }: {menuId: string; menuElementsClass: string; triggerId: string;}) {\n  const menuDiv = document.querySelector(`#${menuId}`) as HTMLElement;\n  if (!menuDiv) throw new Error(\"Invalid menu div id provided\");\n\n  const triggerButton = document.querySelector(`#${triggerId}`) as HTMLElement;\n  if (!triggerButton) throw new Error(\"Invalid trigger button id provided\");\n\n\n  const handlerMap = new Map<HTMLElement, (event: KeyboardEvent) => void>();\n\n  function setAria(isOpen: boolean) {\n    triggerButton.setAttribute(\"aria-expanded\", isOpen ? \"true\" : \"false\");\n  }\n\n  function addListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    menuItems.forEach((menuItem: HTMLElement, index: number) => {\n      if (!handlerMap.has(menuItem)) {\n        const handler = (event: KeyboardEvent) => handleKeyPress(event, menuItems, index, menuDiv, triggerButton);\n        menuItem.addEventListener(\"keydown\", handler);\n        handlerMap.set(menuItem, handler);\n      }\n    });\n  }\n\n  function removeListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    menuItems.forEach((menuItem: HTMLElement) => {\n      const handler = handlerMap.get(menuItem);\n      if (handler) {\n        menuItem.removeEventListener(\"keydown\", handler);\n        handlerMap.delete(menuItem);\n      }\n    });\n  }\n\n  function openMenu() {\n    menuDiv.style.display = \"block\";\n    setAria(true);\n    addListeners();\n  \n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    if (menuItems.length > 0) menuItems[0].focus();\n  }\n\n  function closeMenu() {\n    removeListeners();\n    menuDiv.style.display = \"none\";\n    setAria(false);\n    triggerButton.focus();\n  }\n\n  function cleanup() {\n    removeListeners();\n  }\n\n  return { openMenu, closeMenu, cleanup };\n}"]}