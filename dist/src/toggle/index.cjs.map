{"version":3,"sources":["/Users/macx/aria-ease/package/dist/src/toggle/index.cjs","../../../src/toggle/src/updateToggleAriaAttribute/updateToggleAriaAttribute.ts"],"names":["toggleDiv","Error","toggleItems","Array","from","querySelectorAll","togglesClass","length","toggleStates","forEach","toggle","index","currentPressedToggleIndex","setAttribute","pressed","exports","updateToggleAriaAttribute"],"mappings":"AAAA;MCYE,EAAI,CAACA,WAAW,SAAA,MAAA,OAAA,CAAA,EAAA,EAAA,OAAA,GAAA,EAAA,YAAA,CAAA,CAAA,yBAAA;UACd,MAAM,IAAIC,MAAM,GAAA,MAAA,OAAA,CAAA,EAAA,EAAA,OAAA,GAAA,EAAA,YAAA,EAAA,yBAAA;UAClB,MAAA,IAAA,MAAA,GAAA,aAAA,CAAA,IAAA,OAAA;YAEA,IAAMC,IAAAA,MAAAA,IAA6BC,MAAMC,IAAA,CAAKJ,UAAUK,gBAAA,CAAiB,IAAgB,OAAZC;YAC7E,EAAIJ,IAAAA,MAAAA,EAAYK,EAAAA,IAAA,EAAA,GAAW,CAAA,CAAA,CAAG,SAAA,gBAAA,CAAA,IAAA,OAAA;YAC5B,MAAM,IAAIN,EAAAA,IAAM,EAAA,GAAA,CAAA,CAAA,CAAA,SAAA,gBAAA,CAAA,IAAA,OAAA;UAClB,MAAA,IAAA,EAAA,IAAA,EAAA,GAAA,CAAA,CAAA,CAAA,SAAA,gBAAA,CAAA,IAAA,OAAA;YAEA,IAAGC,IAAAA,MAAAA,EAAYK,GAAAA,GAAA,KAAWC,aAAaD,MAAA,EAAQ;gBAC7C,EAAA,IAAM,EAAA,EAAIN,MAAM,KAAA,aAAA,MAAA,EAAA,iBAAmFO,OAAxCN,YAAYK,MAAM,EAAA,uBAAyC,OAAnBC,aAAaD,MAAM,EAAA;YACxH,MAAA,IAAA,MAAA,KAAA,aAAA,MAAA,EAAA,iBAAA,OAAA,YAAA,MAAA,EAAA,uBAAA,OAAA,aAAA,MAAA,EAAA;YAEAL,IAAAA,IAAAA,IAAYO,EAAAA,IAAA,CAAQ,SAACC,IAAAA,IAAQC,EAAAA,EAAAA,iBAAAA,OAAAA,YAAAA,MAAAA,EAAAA,uBAAAA,OAAAA,aAAAA,MAAAA,EAAAA;gBAC3B,EAAA,EAAIA,EAAAA,EAAAA,IAAAA,CAAUC,SAAAA,QAAAA,kBAA2B,GAAA,OAAA,YAAA,MAAA,EAAA,uBAAA,OAAA,aAAA,MAAA,EAAA;oBACvCF,KAAAA,CAAAA,SAAOG,QAAAA,IAAA,CAAa,aAAA,GAAgBL,YAAA,CAAaG,MAAK,CAAEG,OAAA,GAAU,SAAS;oBAC7E,GAAA,CAAA,SAAA,QAAA,IAAA,CAAA,aAAA,GAAA,YAAA,CAAA,MAAA,CAAA,OAAA,GAAA,SAAA;kBACF,IAAA,CAAA,YAAA,CAAA,aAAA,GAAA,YAAA,CAAA,MAAA,CAAA,OAAA,GAAA,SAAA;cACF,KAAA,YAAA,CAAA,gBAAA,YAAA,CAAA,MAAA,CAAA,OAAA,GAAA,SAAA;QDRAC,MAAQC,yBAAyB,GAAGA,2BACpC,kCAAkC","sourcesContent":["'use strict';\n\n// src/toggle/src/updateToggleAriaAttribute/updateToggleAriaAttribute.ts\nfunction updateToggleAriaAttribute(toggleId, togglesClass, toggleStates, currentPressedToggleIndex) {\n  const toggleDiv = document.querySelector(`#${toggleId}`);\n  if (!toggleDiv) {\n    throw new Error(\"Invalid toggle main div id provided.\");\n  }\n  const toggleItems = Array.from(toggleDiv.querySelectorAll(`.${togglesClass}`));\n  if (toggleItems.length === 0) {\n    throw new Error(\"Invalid toggles shared class provided.\");\n  }\n  if (toggleItems.length !== toggleStates.length) {\n    throw new Error(`Toggle state/DOM length mismatch: found ${toggleItems.length} triggers, but got ${toggleStates.length} state objects.`);\n  }\n  toggleItems.forEach((toggle, index) => {\n    if (index === currentPressedToggleIndex) {\n      toggle.setAttribute(\"aria-pressed\", toggleStates[index].pressed ? \"true\" : \"false\");\n    }\n  });\n}\n\nexports.updateToggleAriaAttribute = updateToggleAriaAttribute;\n//# sourceMappingURL=index.cjs.map\n","/**\n * Adds screen reader accessibility to toggle buttons. Updates the aria attributes of the toggle buttons. Button must be a semantic button element or a non-semantic element with a role of button, and possess the aria-pressed attribute.\n * @param {string} toggleId The id of the toggle buttons parent container.\n * @param {string} togglesClass The shared class of all the toggle buttons.\n * @param {ToggleStates[]} toggleStates Array of objects containing toggle buttons state information.\n * @param {number} currentPressedToggleIndex Index of the currently pressed or unpressed toggle button.\n*/\n\nimport { HTMLElement, ToggleStates } from \"../../../../Types\";\n\nexport function updateToggleAriaAttribute(toggleId: string, togglesClass: string, toggleStates: ToggleStates[], currentPressedToggleIndex: number): void {\n  const toggleDiv: HTMLElement | null = document.querySelector(`#${toggleId}`);\n  if (!toggleDiv) {\n    throw new Error(\"Invalid toggle main div id provided.\");\n  }\n\n  const toggleItems: HTMLElement[] = Array.from(toggleDiv.querySelectorAll(`.${togglesClass}`));\n  if (toggleItems.length === 0) {\n    throw new Error('Invalid toggles shared class provided.');\n  }\n\n  if(toggleItems.length !== toggleStates.length) {\n    throw new Error(`Toggle state/DOM length mismatch: found ${toggleItems.length} triggers, but got ${toggleStates.length} state objects.`);\n  }\n\n  toggleItems.forEach((toggle, index) => {\n    if (index === currentPressedToggleIndex) {\n      toggle.setAttribute(\"aria-pressed\", toggleStates[index].pressed ? 'true' : 'false');\n    }\n  });\n}"]}