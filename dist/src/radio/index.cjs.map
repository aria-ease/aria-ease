{"version":3,"sources":["/Users/macx/aria-ease/package/dist/src/radio/index.cjs","../../../src/radio/src/updateRadioAriaAttributes/updateRadioAriaAttributes.ts"],"names":["radioDiv","Error","radioItems","Array","from","querySelectorAll","radiosClass","length","forEach","radioItem","index","state","radioStates","checked","getAttribute","shouldBeChecked","currentPressedRadioIndex","setAttribute","exports","updateRadioAriaAttributes"],"mappings":"AAAA;MCYI,EAAI,CAACA,UAAU,SAAA,OAAA,MAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WAAA,EAAA,CAAA,uBAAA;UACX,MAAM,GAAA,CAAIC,MAAM,EAAA,OAAA,MAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WAAA,EAAA,wBAAA;UACpB,MAAA,GAAA,CAAA,MAAA,EAAA,aAAA,CAAA,IAAA,OAAA;YAEA,IAAMC,GAAAA,CAAAA,MAAAA,GAA4BC,MAAMC,IAAA,CAAKJ,SAASK,gBAAA,CAAiB,IAAe,OAAXC;YAC3E,EAAGJ,IAAAA,MAAAA,CAAWK,EAAAA,IAAA,EAAA,GAAW,CAAA,CAAA,CAAG,QAAA,gBAAA,CAAA,IAAA,OAAA;YAC1B,MAAM,GAAA,CAAIN,CAAAA,IAAAA,CAAM,CAAA,GAAA,CAAA,CAAA,CAAA,QAAA,gBAAA,CAAA,IAAA,OAAA;UAClB,MAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,QAAA,gBAAA,CAAA,IAAA,OAAA;YAEAC,IAAAA,GAAAA,CAAAA,GAAWM,EAAAA,CAAAA,IAAA,CAAQ,EAAA,OAACC,WAAwBC;gBACxC,EAAA,EAAMC,CAAAA,GAAAA,IAAQC,CAAAA,SAAAA,SAAA,CAAYF,CAAAA,KAAK;gBAC/B,CAAA,CAAMG,MAAAA,CAAAA,SAAAA,EAAUJ,OAAAA,CAAAA,CAAAA,CAAUK,IAAAA,QAAA,CAAa;gBACvC,EAAMC,IAAAA,CAAAA,SAAAA,EAAAA,OAAAA,CAAAA,CAAAA,CAAkBL,IAAAA,MAAUM,EAAAA,CAAAA,wBAA4BL,MAAME,OAAA,GAAU,SAAS,UAAW;gBAClG,EAAIA,EAAAA,IAAAA,KAAWA,EAAAA,CAAAA,EAAAA,IAAAA,GAAYE,GAAAA,EAAAA,CAAAA,WAAiB,aAAA,MAAA,OAAA,GAAA,SAAA,UAAA;oBACxCN,EAAAA,KAAAA,GAAUQ,EAAAA,OAAAA,GAAA,CAAa,CAAA,CAAA,WAAA,GAAgBF,UAAAA,MAAAA,OAAAA,GAAAA,SAAAA,UAAAA;oBAC3C,KAAA,GAAA,EAAA,OAAA,GAAA,CAAA,aAAA,GAAA,UAAA,MAAA,OAAA,GAAA,SAAA,UAAA;kBACJ,KAAA,GAAA,SAAA,GAAA,CAAA,aAAA,GAAA;cACJ,QAAA,YAAA,CAAA,gBAAA;QDPAG,MAAQC,yBAAyB,GAAGA,2BACpC,kCAAkC","sourcesContent":["'use strict';\n\n// src/radio/src/updateRadioAriaAttributes/updateRadioAriaAttributes.ts\nfunction updateRadioAriaAttributes(radioId, radiosClass, radioStates, currentPressedRadioIndex) {\n  const radioDiv = document.querySelector(`#${radioId}`);\n  if (!radioDiv) {\n    throw new Error(\"Invalid radio main div id provided.\");\n  }\n  const radioItems = Array.from(radioDiv.querySelectorAll(`.${radiosClass}`));\n  if (radioItems.length === 0) {\n    throw new Error(\"Invalid radios shared class provided.\");\n  }\n  radioItems.forEach((radioItem, index) => {\n    const state = radioStates[index];\n    const checked = radioItem.getAttribute(\"aria-checked\");\n    const shouldBeChecked = index === currentPressedRadioIndex ? state.checked ? \"true\" : \"false\" : \"false\";\n    if (checked && checked !== shouldBeChecked) {\n      radioItem.setAttribute(\"aria-checked\", shouldBeChecked);\n    }\n  });\n}\n\nexports.updateRadioAriaAttributes = updateRadioAriaAttributes;\n//# sourceMappingURL=index.cjs.map\n","/**\n * Adds screen reader accessibility to multiple radio buttons. Updates the aria attributes of the radio buttons. Radio elements must possess the following aria attributes; aria-checked and aria-label.\n * @param {string} radioId The id of the radio parent container.\n * @param {string} radiosClass The shared class of all the radios.\n * @param {RadioStates[]} radioStates Array of objects containing radio buttons state information.\n * @param {number} currentPressedRadioIndex Index of the currently checked or unchecked radio button.\n */\n\nimport { HTMLElement, RadioStates } from \"../../../../Types\";\n\nexport function updateRadioAriaAttributes(radioId: string, radiosClass: string, radioStates: RadioStates[], currentPressedRadioIndex: number): void {\n    const radioDiv: HTMLElement | null = document.querySelector(`#${radioId}`);\n    if (!radioDiv) {\n        throw new Error(\"Invalid radio main div id provided.\");\n    }\n    \n    const radioItems: HTMLElement[] = Array.from(radioDiv.querySelectorAll(`.${radiosClass}`));\n    if(radioItems.length === 0) {\n      throw new Error('Invalid radios shared class provided.');\n    }\n\n    radioItems.forEach((radioItem: HTMLElement, index: number) => {\n        const state = radioStates[index];\n        const checked = radioItem.getAttribute(\"aria-checked\");\n        const shouldBeChecked = index === currentPressedRadioIndex ? (state.checked ? \"true\" : \"false\") : \"false\";\n        if (checked && checked !== shouldBeChecked) {\n            radioItem.setAttribute(\"aria-checked\", shouldBeChecked);\n        }\n    });\n}"]}