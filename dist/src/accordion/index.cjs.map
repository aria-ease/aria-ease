{"version":3,"sources":["/Users/macx/aria-ease/package/dist/src/accordion/index.cjs","../../../src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts"],"names":["accordionDiv","Error","accordionItems","Array","from","querySelectorAll","accordionTriggersClass","length","accordionStates","forEach","accordionItem","index","state","expanded","getAttribute","shouldBeExpanded","clickedTriggerIndex","display","setAttribute","exports","updateAccordionTriggerAriaAttributes"],"mappings":"AAAA;MCYI,EAAI,CAACA,cAAc,SAAA,aAAA,CAAA,IAAA,OAAA,EAAA,sBAAA,EAAA,cAAA,CAAA,EAAA,mBAAA;UACf,MAAM,IAAIC,GAAAA,GAAM,MAAA,aAAA,CAAA,IAAA,OAAA,EAAA,sBAAA,EAAA,eAAA,EAAA,mBAAA;UACpB,MAAA,IAAA,GAAA,GAAA,MAAA,aAAA,CAAA,IAAA,OAAA;YAEA,IAAMC,IAAAA,GAAAA,GAAAA,OAAgCC,MAAMC,IAAA,CAAKJ,aAAaK,gBAAA,CAAiB,IAA0B,OAAtBC;YACnF,EAAIJ,IAAAA,MAAAA,KAAeK,EAAAA,IAAA,EAAA,GAAW,CAAA,CAAA,CAAG,YAAA,gBAAA,CAAA,IAAA,OAAA;YAC7B,MAAM,IAAIN,GAAAA,EAAAA,CAAM,GAAA,EAAA,GAAA,CAAA,CAAA,CAAA,YAAA,gBAAA,CAAA,IAAA,OAAA;UACpB,MAAA,IAAA,GAAA,EAAA,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA,CAAA,YAAA,gBAAA,CAAA,IAAA,OAAA;YAEA,IAAIC,IAAAA,GAAAA,GAAAA,GAAAA,EAAeK,GAAAA,GAAA,KAAWC,gBAAgBD,MAAA,EAAQ;gBAClD,EAAA,IAAM,EAAA,EAAIN,GAAAA,GAAM,GAAA,KAAA,gBAAA,MAAA,EAAA,cAAyFO,OAA3CN,eAAeK,MAAM,EAAA,uBAA4C,OAAtBC,gBAAgBD,MAAM,EAAA;YACnI,MAAA,IAAA,GAAA,GAAA,GAAA,KAAA,gBAAA,MAAA,EAAA,cAAA,OAAA,eAAA,MAAA,EAAA,uBAAA,OAAA,gBAAA,MAAA,EAAA;YAEAL,IAAAA,IAAAA,GAAAA,GAAAA,AAAeO,GAAAA,IAAA,CAAQ,SAACC,OAAAA,MAAAA,EAA4BC,cAAAA,OAAAA,eAAAA,MAAAA,EAAAA,uBAAAA,OAAAA,gBAAAA,MAAAA,EAAAA;gBAChD,EAAA,EAAMC,IAAAA,GAAQJ,IAAAA,CAAAA,SAAAA,SAAA,CAAgBG,KAAAA,CAAK,aAAA,OAAA,eAAA,MAAA,EAAA,uBAAA,OAAA,gBAAA,MAAA,EAAA;gBACnC,EAAME,GAAAA,GAAAA,IAAAA,CAAWH,SAAAA,SAAAA,CAAAA,GAAcI,EAAAA,CAAAA,SAAA,CAAa;gBAC5C,EAAMC,CAAAA,GAAAA,IAAAA,CAAAA,SAAAA,SAAmBJ,CAAAA,GAAAA,EAAAA,CAAAA,GAAUK,MAAAA,CAAAA,eAAuBJ,MAAMK,OAAA,GAAU,SAAS,UAAW;gBAC9F,EAAIJ,EAAAA,KAAAA,KAAYA,KAAAA,CAAAA,GAAAA,GAAAA,CAAaE,EAAAA,MAAAA,CAAAA,SAAkB,MAAA,MAAA,OAAA,GAAA,SAAA,UAAA;oBAC3CL,GAAAA,KAAAA,KAAAA,CAAcQ,GAAAA,IAAAA,EAAAA,GAAA,CAAa,EAAA,CAAA,SAAA,KAAiBH,CAAAA,MAAAA,OAAAA,GAAAA,SAAAA,UAAAA;oBAChD,MAAA,KAAA,CAAA,OAAA,EAAA,GAAA,CAAA,YAAA,KAAA,CAAA,MAAA,OAAA,GAAA,SAAA,UAAA;kBACJ,MAAA,MAAA,OAAA,KAAA,CAAA,YAAA,KAAA;cACJ,YAAA,YAAA,CAAA,iBAAA;QDRAI,MAAQC,oCAAoC,GAAGA,sCAC/C,kCAAkC","sourcesContent":["'use strict';\n\n// src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts\nfunction updateAccordionTriggerAriaAttributes(accordionId, accordionTriggersClass, accordionStates, clickedTriggerIndex) {\n  const accordionDiv = document.querySelector(`#${accordionId}`);\n  if (!accordionDiv) {\n    throw new Error(\"Invalid accordion main div id provided.\");\n  }\n  const accordionItems = Array.from(accordionDiv.querySelectorAll(`.${accordionTriggersClass}`));\n  if (accordionItems.length === 0) {\n    throw new Error(\"Invalid accordion items shared class provided.\");\n  }\n  if (accordionItems.length !== accordionStates.length) {\n    throw new Error(`Accordion state/DOM length mismatch: found ${accordionItems.length} triggers, but got ${accordionStates.length} state objects.`);\n  }\n  accordionItems.forEach((accordionItem, index) => {\n    const state = accordionStates[index];\n    const expanded = accordionItem.getAttribute(\"aria-expanded\");\n    const shouldBeExpanded = index === clickedTriggerIndex ? state.display ? \"true\" : \"false\" : \"false\";\n    if (expanded && expanded !== shouldBeExpanded) {\n      accordionItem.setAttribute(\"aria-expanded\", shouldBeExpanded);\n    }\n  });\n}\n\nexports.updateAccordionTriggerAriaAttributes = updateAccordionTriggerAriaAttributes;\n//# sourceMappingURL=index.cjs.map\n","/**\n * Adds screen reader accessibility to accordions. Updates the aria attributes of the accordion trigger button. Trigger button element must possess the following aria attributes; aria-expanded, aria-controls, aria-label (for only non-text triggers).\n * @param {string} accordionId The id of the accordion triggers parent container.\n * @param {string} accordionTriggersClass The shared class of all the accordion triggers.\n * @param {AccordionStates[]} accordionStates Array of objects containing accordions state information.\n * @param {number} clickedTriggerIndex Index of the currently clicked accordion trigger within the accordion div container.\n*/\n\nimport { HTMLElement, AccordionStates } from \"../../../../Types\";\n\nexport function updateAccordionTriggerAriaAttributes(accordionId: string, accordionTriggersClass: string, accordionStates: AccordionStates[], clickedTriggerIndex: number): void {\n    const accordionDiv: HTMLElement | null = document.querySelector(`#${accordionId}`);\n    if (!accordionDiv) {\n        throw new Error(\"Invalid accordion main div id provided.\");\n    }\n\n    const accordionItems: HTMLElement[] = Array.from(accordionDiv.querySelectorAll(`.${accordionTriggersClass}`));\n    if (accordionItems.length === 0) {\n        throw new Error(\"Invalid accordion items shared class provided.\");\n    }\n\n    if (accordionItems.length !== accordionStates.length) {\n        throw new Error(`Accordion state/DOM length mismatch: found ${accordionItems.length} triggers, but got ${accordionStates.length} state objects.`);\n    }\n\n    accordionItems.forEach((accordionItem: HTMLElement, index: number) => {\n        const state = accordionStates[index];\n        const expanded = accordionItem.getAttribute(\"aria-expanded\");\n        const shouldBeExpanded = index === clickedTriggerIndex ? (state.display ? \"true\" : \"false\") : \"false\";\n        if (expanded && expanded !== shouldBeExpanded) {\n            accordionItem.setAttribute(\"aria-expanded\", shouldBeExpanded);\n        }\n    });\n}"]}