{"version":3,"sources":["/Users/macx/aria-ease/package/dist/src/block/index.cjs","../../../src/utils/handleKeyPress/handleKeyPress.ts"],"names":["type","el","includes","isTextArea","tagName","isNativeButton","isLink","moveFocus","elementItems","currentIndex","direction","len","length","nextIndex","item","focus","isClickableButNotSemantic","getAttribute","handleKeyPress","event","elementItemIndex","menuElementDiv","triggerButton","currentEl","key","isTextInput","preventDefault","cursorStart","selectionStart","cursorEnd","value","click"],"mappings":"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","sourcesContent":["'use strict';\n\n// src/utils/handleKeyPress/handleKeyPress.ts\nfunction isTextInput(el) {\n  if (el.tagName !== \"INPUT\") return false;\n  const type = el.type;\n  return [\"text\", \"email\", \"password\", \"tel\", \"number\"].includes(type);\n}\nfunction isTextArea(el) {\n  return el.tagName === \"TEXTAREA\";\n}\nfunction isNativeButton(el) {\n  return el.tagName === \"BUTTON\" || el.tagName === \"INPUT\" && [\"button\", \"submit\", \"reset\"].includes(el.type);\n}\nfunction isLink(el) {\n  return el.tagName === \"A\";\n}\nfunction moveFocus(elementItems, currentIndex, direction) {\n  const len = elementItems.length;\n  const nextIndex = (currentIndex + direction + len) % len;\n  elementItems.item(nextIndex).focus();\n}\nfunction isClickableButNotSemantic(el) {\n  return el.getAttribute(\"data-custom-click\") !== null || el.getAttribute(\"data-custom-click\") !== void 0;\n}\nfunction handleKeyPress(event, elementItems, elementItemIndex, menuElementDiv, triggerButton) {\n  const currentEl = elementItems.item(elementItemIndex);\n  switch (event.key) {\n    case \"ArrowUp\":\n    case \"ArrowLeft\": {\n      if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n        event.preventDefault();\n        moveFocus(elementItems, elementItemIndex, -1);\n      } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n        const cursorStart = currentEl.selectionStart;\n        if (cursorStart === 0) {\n          event.preventDefault();\n          moveFocus(elementItems, elementItemIndex, -1);\n        }\n      }\n      break;\n    }\n    case \"ArrowDown\":\n    case \"ArrowRight\": {\n      if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n        event.preventDefault();\n        moveFocus(elementItems, elementItemIndex, 1);\n      } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n        const value = currentEl.value;\n        const cursorEnd = currentEl.selectionStart;\n        if (cursorEnd === value.length) {\n          event.preventDefault();\n          moveFocus(elementItems, elementItemIndex, 1);\n        }\n      }\n      break;\n    }\n    case \"Escape\": {\n      event.preventDefault();\n      break;\n    }\n    case \"Enter\":\n    case \" \": {\n      if (!isNativeButton(currentEl) && !isLink(currentEl) && isClickableButNotSemantic(currentEl)) {\n        event.preventDefault();\n        currentEl.click();\n      }\n      break;\n    }\n  }\n}\n\n// src/block/src/makeBlockAccessible/makeBlockAccessible.ts\nvar eventListenersMap = /* @__PURE__ */ new Map();\nfunction makeBlockAccessible(blockId, blockElementsClass) {\n  const blockDiv = document.querySelector(`#${blockId}`);\n  if (!blockDiv) {\n    throw new Error(\"Invalid block main div id provided.\");\n  }\n  const blockItems = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n  if (!blockItems) {\n    throw new Error(\"Invalid block items shared class provided.\");\n  }\n  blockItems.forEach((blockItem) => {\n    if (!eventListenersMap.has(blockItem)) {\n      blockItem.addEventListener(\"keydown\", (event) => {\n        const items = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n        const index = Array.prototype.indexOf.call(items, blockItem);\n        handleKeyPress(event, items, index);\n        const handler = (event2) => handleKeyPress(event2, items, index);\n        eventListenersMap.set(blockItem, handler);\n      });\n    }\n  });\n  return function cleanUpBlockEventListeners() {\n    blockItems.forEach((blockItem, blockItemIndex) => {\n      if (eventListenersMap.has(blockItem)) {\n        blockItem.removeEventListener(\"keydown\", (event) => handleKeyPress(event, blockItems, blockItemIndex));\n        eventListenersMap.delete(blockItem);\n      }\n    });\n  };\n}\n\nexports.makeBlockAccessible = makeBlockAccessible;\n//# sourceMappingURL=index.cjs.map\n","import { NodeListOfHTMLElement, HTMLElement } from \"../../../Types\";\n\n\nfunction isTextInput(el: HTMLElement): boolean {\n    if (el.tagName !== 'INPUT') return false;\n    const type = (el as HTMLInputElement).type;\n    return ['text', 'email', 'password', 'tel', 'number'].includes(type);\n}\n\nfunction isTextArea(el: HTMLElement): boolean {\n    return el.tagName === 'TEXTAREA';\n}\n\nexport function isNativeButton(el: HTMLElement): boolean {\n    return el.tagName === 'BUTTON' || (el.tagName === 'INPUT' && ['button', 'submit', 'reset'].includes((el as HTMLInputElement).type));\n}\n\nexport function isLink(el: HTMLElement): boolean {\n    return el.tagName === 'A';\n}\n\nfunction moveFocus(elementItems: NodeListOfHTMLElement, currentIndex: number, direction: -1 | 1) {\n    const len = elementItems.length;\n    const nextIndex = (currentIndex + direction + len) % len;\n    elementItems.item(nextIndex).focus();\n}\n\nfunction isClickableButNotSemantic(el: HTMLElement): boolean {\n    return el.getAttribute(\"data-custom-click\") !== null || el.getAttribute(\"data-custom-click\") !== undefined;\n}\n\nfunction handleMenuEscapeKeyPress(menuElement: HTMLElement, menuTriggerButton: HTMLElement) {\n    menuElement.style.display = 'none';\n    const menuTriggerButtonId = menuTriggerButton.getAttribute('id');\n    if (!menuTriggerButtonId) {\n        throw new Error(\"Menu trigger button does not have id attribute\");\n    }\n    menuTriggerButton.setAttribute(\"aria-expanded\", \"false\");\n}\n\nexport function handleKeyPress(\n    event: KeyboardEvent,\n    elementItems: NodeListOfHTMLElement,\n    elementItemIndex: number,\n    menuElementDiv?: HTMLElement,\n    triggerButton?: HTMLElement\n): void {\n    const currentEl = elementItems.item(elementItemIndex);\n    switch (event.key) {\n        case 'ArrowUp':\n        case 'ArrowLeft': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, -1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const cursorStart = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (cursorStart === 0) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, -1);\n                }\n            }\n            break;\n        }\n        case 'ArrowDown':\n        case 'ArrowRight': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, 1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const value = (currentEl as HTMLInputElement | HTMLTextAreaElement).value;\n                const cursorEnd = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (cursorEnd === value.length) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, 1);\n                }\n            }\n            break;\n        }\n        case 'Escape': {\n            event.preventDefault();\n            if (menuElementDiv && triggerButton) {\n                if (getComputedStyle(menuElementDiv).display === 'block') {\n                    handleMenuEscapeKeyPress(menuElementDiv, triggerButton);\n                }\n                triggerButton.focus();\n            }\n            break;\n        }\n        case 'Enter':\n        case ' ': {\n            if (!isNativeButton(currentEl) && !isLink(currentEl) && isClickableButNotSemantic(currentEl)) {\n                event.preventDefault();\n                currentEl.click();\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}"]}