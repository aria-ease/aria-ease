{"version":3,"sources":["/Users/macx/aria-ease/package/dist/src/block/index.cjs","../../../src/utils/handleKeyPress/handleKeyPress.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\n// src/utils/handleKeyPress/handleKeyPress.ts\nfunction isTextInput(el) {\n  if (el.tagName !== \"INPUT\") return false;\n  const type = el.type;\n  return [\"text\", \"email\", \"password\", \"tel\", \"number\"].includes(type);\n}\nfunction isTextArea(el) {\n  return el.tagName === \"TEXTAREA\";\n}\nfunction isNativeButton(el) {\n  return el.tagName === \"BUTTON\" || el.tagName === \"INPUT\" && [\"button\", \"submit\", \"reset\"].includes(el.type);\n}\nfunction isLink(el) {\n  return el.tagName === \"A\";\n}\nfunction moveFocus(elementItems, currentIndex, direction) {\n  const len = elementItems.length;\n  const nextIndex = (currentIndex + direction + len) % len;\n  elementItems.item(nextIndex).focus();\n}\nfunction isClickableButNotSemantic(el) {\n  return el.getAttribute(\"data-custom-click\") !== null || el.getAttribute(\"data-custom-click\") !== void 0;\n}\nfunction handleKeyPress(event, elementItems, elementItemIndex, menuElementDiv, triggerButton) {\n  const currentEl = elementItems.item(elementItemIndex);\n  switch (event.key) {\n    case \"ArrowUp\":\n    case \"ArrowLeft\": {\n      if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n        event.preventDefault();\n        moveFocus(elementItems, elementItemIndex, -1);\n      } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n        const cursorStart = currentEl.selectionStart;\n        if (cursorStart === 0) {\n          event.preventDefault();\n          moveFocus(elementItems, elementItemIndex, -1);\n        }\n      }\n      break;\n    }\n    case \"ArrowDown\":\n    case \"ArrowRight\": {\n      if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n        event.preventDefault();\n        moveFocus(elementItems, elementItemIndex, 1);\n      } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n        const value = currentEl.value;\n        const cursorEnd = currentEl.selectionStart;\n        if (cursorEnd === value.length) {\n          event.preventDefault();\n          moveFocus(elementItems, elementItemIndex, 1);\n        }\n      }\n      break;\n    }\n    case \"Escape\": {\n      event.preventDefault();\n      break;\n    }\n    case \"Enter\":\n    case \" \": {\n      if (!isNativeButton(currentEl) && !isLink(currentEl) && isClickableButNotSemantic(currentEl)) {\n        event.preventDefault();\n        currentEl.click();\n      }\n      break;\n    }\n  }\n}\n\n// src/block/src/makeBlockAccessible/makeBlockAccessible.ts\nvar eventListenersMap = /* @__PURE__ */ new Map();\nfunction makeBlockAccessible(blockId, blockElementsClass) {\n  const blockDiv = document.querySelector(`#${blockId}`);\n  if (!blockDiv) {\n    throw new Error(\"Invalid block main div id provided.\");\n  }\n  const blockItems = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n  if (!blockItems) {\n    throw new Error(\"Invalid block items shared class provided.\");\n  }\n  blockItems.forEach((blockItem) => {\n    if (!eventListenersMap.has(blockItem)) {\n      blockItem.addEventListener(\"keydown\", (event) => {\n        const items = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n        const index = Array.prototype.indexOf.call(items, blockItem);\n        handleKeyPress(event, items, index);\n        const handler = (event2) => handleKeyPress(event2, items, index);\n        eventListenersMap.set(blockItem, handler);\n      });\n    }\n  });\n  return function cleanUpBlockEventListeners() {\n    blockItems.forEach((blockItem, blockItemIndex) => {\n      if (eventListenersMap.has(blockItem)) {\n        blockItem.removeEventListener(\"keydown\", (event) => handleKeyPress(event, blockItems, blockItemIndex));\n        eventListenersMap.delete(blockItem);\n      }\n    });\n  };\n}\n\nexports.makeBlockAccessible = makeBlockAccessible;\n//# sourceMappingURL=index.cjs.map\n","import { NodeListOfHTMLElement, HTMLElement } from \"../../../Types\";\n\n\nfunction isTextInput(el: HTMLElement): boolean {\n    if (el.tagName !== 'INPUT') return false;\n    const type = (el as HTMLInputElement).type;\n    return ['text', 'email', 'password', 'tel', 'number'].includes(type);\n}\n\nfunction isTextArea(el: HTMLElement): boolean {\n    return el.tagName === 'TEXTAREA';\n}\n\nexport function isNativeButton(el: HTMLElement): boolean {\n    return el.tagName === 'BUTTON' || (el.tagName === 'INPUT' && ['button', 'submit', 'reset'].includes((el as HTMLInputElement).type));\n}\n\nexport function isLink(el: HTMLElement): boolean {\n    return el.tagName === 'A';\n}\n\nfunction moveFocus(elementItems: NodeListOfHTMLElement, currentIndex: number, direction: -1 | 1) {\n    const len = elementItems.length;\n    const nextIndex = (currentIndex + direction + len) % len;\n    elementItems.item(nextIndex).focus();\n}\n\nfunction isClickableButNotSemantic(el: HTMLElement): boolean {\n    return el.getAttribute(\"data-custom-click\") !== null || el.getAttribute(\"data-custom-click\") !== undefined;\n}\n\nfunction handleMenuEscapeKeyPress(menuElement: HTMLElement, menuTriggerButton: HTMLElement) {\n    menuElement.style.display = 'none';\n    const menuTriggerButtonId = menuTriggerButton.getAttribute('id');\n    if (!menuTriggerButtonId) {\n        throw new Error(\"Menu trigger button does not have id attribute\");\n    }\n    menuTriggerButton.setAttribute(\"aria-expanded\", \"false\");\n}\n\nexport function handleKeyPress(\n    event: KeyboardEvent,\n    elementItems: NodeListOfHTMLElement,\n    elementItemIndex: number,\n    menuElementDiv?: HTMLElement,\n    triggerButton?: HTMLElement\n): void {\n    const currentEl = elementItems.item(elementItemIndex);\n    switch (event.key) {\n        case 'ArrowUp':\n        case 'ArrowLeft': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, -1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const cursorStart = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (cursorStart === 0) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, -1);\n                }\n            }\n            break;\n        }\n        case 'ArrowDown':\n        case 'ArrowRight': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, 1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const value = (currentEl as HTMLInputElement | HTMLTextAreaElement).value;\n                const cursorEnd = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (cursorEnd === value.length) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, 1);\n                }\n            }\n            break;\n        }\n        case 'Escape': {\n            event.preventDefault();\n            if (menuElementDiv && triggerButton) {\n                if (getComputedStyle(menuElementDiv).display === 'block') {\n                    handleMenuEscapeKeyPress(menuElementDiv, triggerButton);\n                }\n                triggerButton.focus();\n            }\n            break;\n        }\n        case 'Enter':\n        case ' ': {\n            if (!isNativeButton(currentEl) && !isLink(currentEl) && isClickableButNotSemantic(currentEl)) {\n                event.preventDefault();\n                currentEl.click();\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}"]}