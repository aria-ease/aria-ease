{"version":3,"sources":["/Users/macx/aria-ease/package/dist/src/checkbox/index.cjs","../../../src/checkbox/src/updateCheckboxAriaAttributes/updateCheckboxAriaAttributes.ts"],"names":["checkboxDiv","Error","checkboxItems","Array","from","document","querySelectorAll","checkboxesClass","length","forEach","checkbox","index","currentPressedCheckboxIndex","setAttribute","checkboxStates","checked","exports","updateCheckboxAriaAttributes"],"mappings":"AAAA;MCYE,EAAI,CAACA,aAAa,SAAA,OAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,SAAA,EAAA,aAAA,CAAA,EAAA,2BAAA;UAChB,MAAM,IAAIC,EAAAA,IAAM,KAAA,OAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,SAAA,EAAA,cAAA,EAAA,2BAAA;UAClB,MAAA,IAAA,EAAA,IAAA,KAAA,aAAA,CAAA,IAAA,OAAA;YAEA,IAAMC,IAAAA,EAAAA,IAAAA,MAA+BC,MAAMC,IAAA,CAAKC,SAASC,gBAAA,CAAiB,IAAmB,OAAfC;YAC9E,EAAIL,IAAAA,MAAAA,IAAcM,EAAAA,IAAA,EAAA,GAAW,CAAA,CAAA,CAAG,QAAA,gBAAA,CAAA,IAAA,OAAA;YAC9B,MAAM,IAAIP,EAAAA,EAAAA,EAAM,EAAA,EAAA,GAAA,CAAA,CAAA,CAAA,QAAA,gBAAA,CAAA,IAAA,OAAA;UAClB,MAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,CAAA,CAAA,CAAA,QAAA,gBAAA,CAAA,IAAA,OAAA;YAEAC,IAAAA,IAAAA,EAAAA,IAAcO,EAAAA,KAAA,CAAQ,EAAA,OAACC,UAAuBC;gBAC5C,EAAA,EAAIA,IAAAA,MAAUC,CAAAA,CAAAA,SAAAA,UAAAA,gBAA6B;oBACzCF,MAAAA,CAAAA,CAAAA,SAASG,UAAAA,EAAA,CAAa,aAAA,GAAgBC,cAAA,CAAeH,MAAK,CAAEI,OAAA,GAAU,SAAS;oBACjF,IAAA,CAAA,CAAA,SAAA,UAAA,EAAA,CAAA,aAAA,GAAA,cAAA,CAAA,MAAA,CAAA,OAAA,GAAA,SAAA;kBACF,IAAA,GAAA,YAAA,CAAA,aAAA,GAAA,cAAA,CAAA,MAAA,CAAA,OAAA,GAAA,SAAA;cACF,OAAA,YAAA,CAAA,gBAAA,cAAA,CAAA,MAAA,CAAA,OAAA,GAAA,SAAA;QDPAC,MAAQC,4BAA4B,GAAGA,8BACvC,kCAAkC","sourcesContent":["'use strict';\n\n// src/checkbox/src/updateCheckboxAriaAttributes/updateCheckboxAriaAttributes.ts\nfunction updateCheckboxAriaAttributes(checkboxId, checkboxesClass, checkboxStates, currentPressedCheckboxIndex) {\n  const checkboxDiv = document.querySelector(`#${checkboxId}`);\n  if (!checkboxDiv) {\n    throw new Error(\"Invalid checkbox main div id provided.\");\n  }\n  const checkboxItems = Array.from(document.querySelectorAll(`.${checkboxesClass}`));\n  if (checkboxItems.length === 0) {\n    throw new Error(\"Invalid checkboxes shared class provided.\");\n  }\n  checkboxItems.forEach((checkbox, index) => {\n    if (index === currentPressedCheckboxIndex) {\n      checkbox.setAttribute(\"aria-checked\", checkboxStates[index].checked ? \"true\" : \"false\");\n    }\n  });\n}\n\nexports.updateCheckboxAriaAttributes = updateCheckboxAriaAttributes;\n//# sourceMappingURL=index.cjs.map\n","/**\n * Adds screen reader accessibility to multiple checkboxes. Updates the aria attributes of the checkboxes. Checkbox elements must possess the following aria attributes; aria-checked and aria-label.\n * @param {string} checkboxId The id of the checkbox parent container.\n * @param {string} checkboxesClass The shared class of all the checkboxes.\n * @param {CheckboxStates[]} checkboxStates Array of objects containing checkboxes state information.\n * @param {number} currentPressedCheckboxIndex Index of the currently checked or unchecked checkbox.\n*/\n\nimport { HTMLElement, CheckboxStates } from \"../../../../Types\";\n\nexport function updateCheckboxAriaAttributes(checkboxId: string, checkboxesClass: string, checkboxStates: CheckboxStates[], currentPressedCheckboxIndex: number): void {\n  const checkboxDiv: HTMLElement | null = document.querySelector(`#${checkboxId}`);\n  if (!checkboxDiv) {\n    throw new Error(\"Invalid checkbox main div id provided.\");\n  }\n            \n  const checkboxItems: HTMLElement[] = Array.from(document.querySelectorAll(`.${checkboxesClass}`));\n  if (checkboxItems.length === 0) {\n    throw new Error('Invalid checkboxes shared class provided.');\n  };\n\n  checkboxItems.forEach((checkbox: HTMLElement, index: number) => {\n    if (index === currentPressedCheckboxIndex) {\n      checkbox.setAttribute(\"aria-checked\", checkboxStates[index].checked ? 'true' : 'false');\n    }\n  });\n}"]}