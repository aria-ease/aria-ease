{"version":3,"sources":["/Users/macx/aria-ease/package/dist/index.cjs","../src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts","../src/utils/handleKeyPress/handleKeyPress.ts","../src/block/src/makeBlockAccessible/makeBlockAccessible.ts","../src/checkbox/src/updateCheckboxAriaAttributes/updateCheckboxAriaAttributes.ts","../src/menu/src/makeMenuAccessible/makeMenuAccessible.ts"],"names":["accordionDiv","Error","accordionItems","Array","from","querySelectorAll","accordionTriggersClass","length","accordionStates","forEach","accordionItem","index","state","expanded","getAttribute","shouldBeExpanded","clickedTriggerIndex","display","setAttribute","el","tagName","includes","type","isTextArea","isNativeButton","isLink","moveFocus","elementItems","currentIndex","direction","len","nextIndex","item","focus","isClickableButNotSemantic","handleMenuEscapeKeyPress","menuElement","menuTriggerButton","style","menuTriggerButtonId","handleKeyPress","event","elementItemIndex","menuElementDiv","triggerButton","currentEl","key","isTextInput","preventDefault","cursorStart","selectionStart","value","cursorEnd","getComputedStyle","click","eventListenersMap","Map","makeBlockAccessible","blockId","blockElementsClass","blockDiv","document","querySelector","blockItems","blockItem","has","addEventListener","items","prototype","indexOf","call","handler","cleanUpBlockEventListeners","blockItemIndex","removeEventListener","delete","updateCheckboxAriaAttributes","checkboxId","checkboxesClass","checkboxStates","currentPressedCheckboxIndex","checkboxDiv","checkboxItems","checkbox","checked","makeMenuAccessible","menuId","menuElementsClass","triggerId","menuDiv","handlerMap","setAria","isOpen","addListeners","menuItems","menuItem","removeListeners","get","openMenu","closeMenu"],"mappings":"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","sourcesContent":["'use strict';\n\n// src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts\nfunction updateAccordionTriggerAriaAttributes(accordionId, accordionTriggersClass, accordionStates, clickedTriggerIndex) {\n  const accordionDiv = document.querySelector(`#${accordionId}`);\n  if (!accordionDiv) {\n    throw new Error(\"Invalid accordion main div id provided.\");\n  }\n  const accordionItems = Array.from(accordionDiv.querySelectorAll(`.${accordionTriggersClass}`));\n  if (accordionItems.length === 0) {\n    throw new Error(\"Invalid accordion items shared class provided.\");\n  }\n  if (accordionItems.length !== accordionStates.length) {\n    throw new Error(`Accordion state/DOM length mismatch: found ${accordionItems.length} triggers, but got ${accordionStates.length} state objects.`);\n  }\n  accordionItems.forEach((accordionItem, index) => {\n    const state = accordionStates[index];\n    const expanded = accordionItem.getAttribute(\"aria-expanded\");\n    const shouldBeExpanded = index === clickedTriggerIndex ? state.display ? \"true\" : \"false\" : \"false\";\n    if (expanded && expanded !== shouldBeExpanded) {\n      accordionItem.setAttribute(\"aria-expanded\", shouldBeExpanded);\n    }\n  });\n}\n\n// src/utils/handleKeyPress/handleKeyPress.ts\nfunction isTextInput(el) {\n  if (el.tagName !== \"INPUT\") return false;\n  const type = el.type;\n  return [\"text\", \"email\", \"password\", \"tel\", \"number\"].includes(type);\n}\nfunction isTextArea(el) {\n  return el.tagName === \"TEXTAREA\";\n}\nfunction isNativeButton(el) {\n  return el.tagName === \"BUTTON\" || el.tagName === \"INPUT\" && [\"button\", \"submit\", \"reset\"].includes(el.type);\n}\nfunction isLink(el) {\n  return el.tagName === \"A\";\n}\nfunction moveFocus(elementItems, currentIndex, direction) {\n  const len = elementItems.length;\n  const nextIndex = (currentIndex + direction + len) % len;\n  elementItems.item(nextIndex).focus();\n}\nfunction isClickableButNotSemantic(el) {\n  return el.getAttribute(\"data-custom-click\") !== null || el.getAttribute(\"data-custom-click\") !== void 0;\n}\nfunction handleMenuEscapeKeyPress(menuElement, menuTriggerButton) {\n  menuElement.style.display = \"none\";\n  const menuTriggerButtonId = menuTriggerButton.getAttribute(\"id\");\n  if (!menuTriggerButtonId) {\n    throw new Error(\"Menu trigger button does not have id attribute\");\n  }\n  menuTriggerButton.setAttribute(\"aria-expanded\", \"false\");\n}\nfunction handleKeyPress(event, elementItems, elementItemIndex, menuElementDiv, triggerButton) {\n  const currentEl = elementItems.item(elementItemIndex);\n  switch (event.key) {\n    case \"ArrowUp\":\n    case \"ArrowLeft\": {\n      if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n        event.preventDefault();\n        moveFocus(elementItems, elementItemIndex, -1);\n      } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n        const cursorStart = currentEl.selectionStart;\n        if (cursorStart === 0) {\n          event.preventDefault();\n          moveFocus(elementItems, elementItemIndex, -1);\n        }\n      }\n      break;\n    }\n    case \"ArrowDown\":\n    case \"ArrowRight\": {\n      if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n        event.preventDefault();\n        moveFocus(elementItems, elementItemIndex, 1);\n      } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n        const value = currentEl.value;\n        const cursorEnd = currentEl.selectionStart;\n        if (cursorEnd === value.length) {\n          event.preventDefault();\n          moveFocus(elementItems, elementItemIndex, 1);\n        }\n      }\n      break;\n    }\n    case \"Escape\": {\n      event.preventDefault();\n      if (menuElementDiv && triggerButton) {\n        if (getComputedStyle(menuElementDiv).display === \"block\") {\n          handleMenuEscapeKeyPress(menuElementDiv, triggerButton);\n        }\n        triggerButton.focus();\n      }\n      break;\n    }\n    case \"Enter\":\n    case \" \": {\n      if (!isNativeButton(currentEl) && !isLink(currentEl) && isClickableButNotSemantic(currentEl)) {\n        event.preventDefault();\n        currentEl.click();\n      }\n      break;\n    }\n  }\n}\n\n// src/block/src/makeBlockAccessible/makeBlockAccessible.ts\nvar eventListenersMap = /* @__PURE__ */ new Map();\nfunction makeBlockAccessible(blockId, blockElementsClass) {\n  const blockDiv = document.querySelector(`#${blockId}`);\n  if (!blockDiv) {\n    throw new Error(\"Invalid block main div id provided.\");\n  }\n  const blockItems = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n  if (!blockItems) {\n    throw new Error(\"Invalid block items shared class provided.\");\n  }\n  blockItems.forEach((blockItem) => {\n    if (!eventListenersMap.has(blockItem)) {\n      blockItem.addEventListener(\"keydown\", (event) => {\n        const items = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n        const index = Array.prototype.indexOf.call(items, blockItem);\n        handleKeyPress(event, items, index);\n        const handler = (event2) => handleKeyPress(event2, items, index);\n        eventListenersMap.set(blockItem, handler);\n      });\n    }\n  });\n  return function cleanUpBlockEventListeners() {\n    blockItems.forEach((blockItem, blockItemIndex) => {\n      if (eventListenersMap.has(blockItem)) {\n        blockItem.removeEventListener(\"keydown\", (event) => handleKeyPress(event, blockItems, blockItemIndex));\n        eventListenersMap.delete(blockItem);\n      }\n    });\n  };\n}\n\n// src/checkbox/src/updateCheckboxAriaAttributes/updateCheckboxAriaAttributes.ts\nfunction updateCheckboxAriaAttributes(checkboxId, checkboxesClass, checkboxStates, currentPressedCheckboxIndex) {\n  const checkboxDiv = document.querySelector(`#${checkboxId}`);\n  if (!checkboxDiv) {\n    throw new Error(\"Invalid checkbox main div id provided.\");\n  }\n  const checkboxItems = Array.from(document.querySelectorAll(`.${checkboxesClass}`));\n  if (checkboxItems.length === 0) {\n    throw new Error(\"Invalid checkboxes shared class provided.\");\n  }\n  checkboxItems.forEach((checkbox, index) => {\n    if (index === currentPressedCheckboxIndex) {\n      checkbox.setAttribute(\"aria-checked\", checkboxStates[index].checked ? \"true\" : \"false\");\n    }\n  });\n}\n\n// src/menu/src/makeMenuAccessible/makeMenuAccessible.ts\nfunction makeMenuAccessible({ menuId, menuElementsClass, triggerId }) {\n  const menuDiv = document.querySelector(`#${menuId}`);\n  if (!menuDiv) throw new Error(\"Invalid menu div id provided\");\n  const triggerButton = document.querySelector(`#${triggerId}`);\n  if (!triggerButton) throw new Error(\"Invalid trigger button id provided\");\n  const handlerMap = /* @__PURE__ */ new Map();\n  function setAria(isOpen) {\n    triggerButton.setAttribute(\"aria-expanded\", isOpen ? \"true\" : \"false\");\n  }\n  function addListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    menuItems.forEach((menuItem, index) => {\n      if (!handlerMap.has(menuItem)) {\n        const handler = (event) => handleKeyPress(event, menuItems, index, menuDiv, triggerButton);\n        menuItem.addEventListener(\"keydown\", handler);\n        handlerMap.set(menuItem, handler);\n      }\n    });\n  }\n  function removeListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    menuItems.forEach((menuItem) => {\n      const handler = handlerMap.get(menuItem);\n      if (handler) {\n        menuItem.removeEventListener(\"keydown\", handler);\n        handlerMap.delete(menuItem);\n      }\n    });\n  }\n  function openMenu() {\n    menuDiv.style.display = \"block\";\n    setAria(true);\n    addListeners();\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`);\n    if (menuItems.length > 0) menuItems[0].focus();\n  }\n  function closeMenu() {\n    removeListeners();\n    menuDiv.style.display = \"none\";\n    setAria(false);\n    triggerButton.focus();\n  }\n  function cleanup() {\n    removeListeners();\n  }\n  return { openMenu, closeMenu, cleanup };\n}\n\n// src/radio/src/updateRadioAriaAttributes/updateRadioAriaAttributes.ts\nfunction updateRadioAriaAttributes(radioId, radiosClass, radioStates, currentPressedRadioIndex) {\n  const radioDiv = document.querySelector(`#${radioId}`);\n  if (!radioDiv) {\n    throw new Error(\"Invalid radio main div id provided.\");\n  }\n  const radioItems = Array.from(radioDiv.querySelectorAll(`.${radiosClass}`));\n  if (radioItems.length === 0) {\n    throw new Error(\"Invalid radios shared class provided.\");\n  }\n  radioItems.forEach((radioItem, index) => {\n    const state = radioStates[index];\n    const checked = radioItem.getAttribute(\"aria-checked\");\n    const shouldBeChecked = index === currentPressedRadioIndex ? state.checked ? \"true\" : \"false\" : \"false\";\n    if (checked && checked !== shouldBeChecked) {\n      radioItem.setAttribute(\"aria-checked\", shouldBeChecked);\n    }\n  });\n}\n\n// src/toggle/src/updateToggleAriaAttribute/updateToggleAriaAttribute.ts\nfunction updateToggleAriaAttribute(toggleId, togglesClass, toggleStates, currentPressedToggleIndex) {\n  const toggleDiv = document.querySelector(`#${toggleId}`);\n  if (!toggleDiv) {\n    throw new Error(\"Invalid toggle main div id provided.\");\n  }\n  const toggleItems = Array.from(toggleDiv.querySelectorAll(`.${togglesClass}`));\n  if (toggleItems.length === 0) {\n    throw new Error(\"Invalid toggles shared class provided.\");\n  }\n  if (toggleItems.length !== toggleStates.length) {\n    throw new Error(`Toggle state/DOM length mismatch: found ${toggleItems.length} triggers, but got ${toggleStates.length} state objects.`);\n  }\n  toggleItems.forEach((toggle, index) => {\n    if (index === currentPressedToggleIndex) {\n      toggle.setAttribute(\"aria-pressed\", toggleStates[index].pressed ? \"true\" : \"false\");\n    }\n  });\n}\n\nexports.makeBlockAccessible = makeBlockAccessible;\nexports.makeMenuAccessible = makeMenuAccessible;\nexports.updateAccordionTriggerAriaAttributes = updateAccordionTriggerAriaAttributes;\nexports.updateCheckboxAriaAttributes = updateCheckboxAriaAttributes;\nexports.updateRadioAriaAttributes = updateRadioAriaAttributes;\nexports.updateToggleAriaAttribute = updateToggleAriaAttribute;\n//# sourceMappingURL=index.cjs.map\n","/**\n * Adds screen reader accessibility to accordions. Updates the aria attributes of the accordion trigger button. Trigger button element must possess the following aria attributes; aria-expanded, aria-controls, aria-label (for only non-text triggers).\n * @param {string} accordionId The id of the accordion triggers parent container.\n * @param {string} accordionTriggersClass The shared class of all the accordion triggers.\n * @param {AccordionStates[]} accordionStates Array of objects containing accordions state information.\n * @param {number} clickedTriggerIndex Index of the currently clicked accordion trigger within the accordion div container.\n*/\n\nimport { HTMLElement, AccordionStates } from \"../../../../Types\";\n\nexport function updateAccordionTriggerAriaAttributes(accordionId: string, accordionTriggersClass: string, accordionStates: AccordionStates[], clickedTriggerIndex: number): void {\n    const accordionDiv: HTMLElement | null = document.querySelector(`#${accordionId}`);\n    if (!accordionDiv) {\n        throw new Error(\"Invalid accordion main div id provided.\");\n    }\n\n    const accordionItems: HTMLElement[] = Array.from(accordionDiv.querySelectorAll(`.${accordionTriggersClass}`));\n    if (accordionItems.length === 0) {\n        throw new Error(\"Invalid accordion items shared class provided.\");\n    }\n\n    if (accordionItems.length !== accordionStates.length) {\n        throw new Error(`Accordion state/DOM length mismatch: found ${accordionItems.length} triggers, but got ${accordionStates.length} state objects.`);\n    }\n\n    accordionItems.forEach((accordionItem: HTMLElement, index: number) => {\n        const state = accordionStates[index];\n        const expanded = accordionItem.getAttribute(\"aria-expanded\");\n        const shouldBeExpanded = index === clickedTriggerIndex ? (state.display ? \"true\" : \"false\") : \"false\";\n        if (expanded && expanded !== shouldBeExpanded) {\n            accordionItem.setAttribute(\"aria-expanded\", shouldBeExpanded);\n        }\n    });\n}","import { NodeListOfHTMLElement, HTMLElement } from \"../../../Types\";\n\n\nfunction isTextInput(el: HTMLElement): boolean {\n    if (el.tagName !== 'INPUT') return false;\n    const type = (el as HTMLInputElement).type;\n    return ['text', 'email', 'password', 'tel', 'number'].includes(type);\n}\n\nfunction isTextArea(el: HTMLElement): boolean {\n    return el.tagName === 'TEXTAREA';\n}\n\nexport function isNativeButton(el: HTMLElement): boolean {\n    return el.tagName === 'BUTTON' || (el.tagName === 'INPUT' && ['button', 'submit', 'reset'].includes((el as HTMLInputElement).type));\n}\n\nexport function isLink(el: HTMLElement): boolean {\n    return el.tagName === 'A';\n}\n\nfunction moveFocus(elementItems: NodeListOfHTMLElement, currentIndex: number, direction: -1 | 1) {\n    const len = elementItems.length;\n    const nextIndex = (currentIndex + direction + len) % len;\n    elementItems.item(nextIndex).focus();\n}\n\nfunction isClickableButNotSemantic(el: HTMLElement): boolean {\n    return el.getAttribute(\"data-custom-click\") !== null || el.getAttribute(\"data-custom-click\") !== undefined;\n}\n\nfunction handleMenuEscapeKeyPress(menuElement: HTMLElement, menuTriggerButton: HTMLElement) {\n    menuElement.style.display = 'none';\n    const menuTriggerButtonId = menuTriggerButton.getAttribute('id');\n    if (!menuTriggerButtonId) {\n        throw new Error(\"Menu trigger button does not have id attribute\");\n    }\n    menuTriggerButton.setAttribute(\"aria-expanded\", \"false\");\n}\n\nexport function handleKeyPress(\n    event: KeyboardEvent,\n    elementItems: NodeListOfHTMLElement,\n    elementItemIndex: number,\n    menuElementDiv?: HTMLElement,\n    triggerButton?: HTMLElement\n): void {\n    const currentEl = elementItems.item(elementItemIndex);\n    switch (event.key) {\n        case 'ArrowUp':\n        case 'ArrowLeft': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, -1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const cursorStart = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (cursorStart === 0) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, -1);\n                }\n            }\n            break;\n        }\n        case 'ArrowDown':\n        case 'ArrowRight': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, 1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const value = (currentEl as HTMLInputElement | HTMLTextAreaElement).value;\n                const cursorEnd = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (cursorEnd === value.length) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, 1);\n                }\n            }\n            break;\n        }\n        case 'Escape': {\n            event.preventDefault();\n            if (menuElementDiv && triggerButton) {\n                if (getComputedStyle(menuElementDiv).display === 'block') {\n                    handleMenuEscapeKeyPress(menuElementDiv, triggerButton);\n                }\n                triggerButton.focus();\n            }\n            break;\n        }\n        case 'Enter':\n        case ' ': {\n            if (!isNativeButton(currentEl) && !isLink(currentEl) && isClickableButNotSemantic(currentEl)) {\n                event.preventDefault();\n                currentEl.click();\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}","/** \n * Adds keyboard interaction to block. The block traps focus and can be interacted with using the keyboard.\n * @param {string} blockId The id of the block container.\n * @param {string} blockElementsClass The shared class of the elements that are children of the block.\n*/\n\nimport { HTMLElement, NodeListOfHTMLElement } from \"../../../../Types\"\nimport { handleKeyPress } from \"../../../utils/handleKeyPress/handleKeyPress\";\n\nconst eventListenersMap = new Map<HTMLElement, (event: KeyboardEvent) => void>();\n\nexport function makeBlockAccessible(blockId: string, blockElementsClass: string) {\n  const blockDiv: HTMLElement = document.querySelector(`#${blockId}`) as HTMLElement\n  if(!blockDiv) {\n    throw new Error(\"Invalid block main div id provided.\")\n  }\n\n  const blockItems: NodeListOfHTMLElement = blockDiv.querySelectorAll(`.${blockElementsClass}`);\n  if(!blockItems) {\n    throw new Error(\"Invalid block items shared class provided.\")\n  }\n\n  blockItems.forEach((blockItem: HTMLElement): void => {\n    if (!eventListenersMap.has(blockItem)) {\n      blockItem.addEventListener(\"keydown\", (event: KeyboardEvent) => {\n        const items = blockDiv.querySelectorAll(`.${blockElementsClass}`) as NodeListOf<HTMLElement>;\n        const index = Array.prototype.indexOf.call(items, blockItem);\n        handleKeyPress(event, items, index);\n        const handler = (event: KeyboardEvent) => handleKeyPress(event, items, index);\n        eventListenersMap.set(blockItem, handler);\n      });\n      \n    }\n  });\n\n\n\n  return function cleanUpBlockEventListeners(): void {\n    blockItems.forEach((blockItem: HTMLElement, blockItemIndex: number): void => {\n      if (eventListenersMap.has(blockItem)) {\n        blockItem.removeEventListener(\"keydown\", (event: KeyboardEvent) => handleKeyPress(event, blockItems, blockItemIndex));\n        eventListenersMap.delete(blockItem);\n      }\n    });\n  };\n}","/**\n * Adds screen reader accessibility to multiple checkboxes. Updates the aria attributes of the checkboxes. Checkbox elements must possess the following aria attributes; aria-checked and aria-label.\n * @param {string} checkboxId The id of the checkbox parent container.\n * @param {string} checkboxesClass The shared class of all the checkboxes.\n * @param {CheckboxStates[]} checkboxStates Array of objects containing checkboxes state information.\n * @param {number} currentPressedCheckboxIndex Index of the currently checked or unchecked checkbox.\n*/\n\nimport { HTMLElement, CheckboxStates } from \"../../../../Types\";\n\nexport function updateCheckboxAriaAttributes(checkboxId: string, checkboxesClass: string, checkboxStates: CheckboxStates[], currentPressedCheckboxIndex: number): void {\n  const checkboxDiv: HTMLElement | null = document.querySelector(`#${checkboxId}`);\n  if (!checkboxDiv) {\n    throw new Error(\"Invalid checkbox main div id provided.\");\n  }\n            \n  const checkboxItems: HTMLElement[] = Array.from(document.querySelectorAll(`.${checkboxesClass}`));\n  if (checkboxItems.length === 0) {\n    throw new Error('Invalid checkboxes shared class provided.');\n  };\n\n  checkboxItems.forEach((checkbox: HTMLElement, index: number) => {\n    if (index === currentPressedCheckboxIndex) {\n      checkbox.setAttribute(\"aria-checked\", checkboxStates[index].checked ? 'true' : 'false');\n    }\n  });\n}","/**\n  * Adds keyboard interaction to toggle menu. The menu traps focus and can be interacted with using the keyboard. The first interactive item of the menu has focus when menu open.\n  * @param {string} menuId - The id of the menu.\n  * @param {string} menuElementsClass - The class of the items that are children of the menu.\n  * @param {string} triggerId - The id of the button that triggers the menu.\n*/\n\nimport { handleKeyPress } from \"../../../utils/handleKeyPress/handleKeyPress\";\nimport { NodeListOfHTMLElement } from \"../../../../Types\";\n\nexport function makeMenuAccessible({ menuId, menuElementsClass, triggerId }: {menuId: string; menuElementsClass: string; triggerId: string;}) {\n  const menuDiv = document.querySelector(`#${menuId}`) as HTMLElement;\n  if (!menuDiv) throw new Error(\"Invalid menu div id provided\");\n\n  const triggerButton = document.querySelector(`#${triggerId}`) as HTMLElement;\n  if (!triggerButton) throw new Error(\"Invalid trigger button id provided\");\n\n\n  const handlerMap = new Map<HTMLElement, (event: KeyboardEvent) => void>();\n\n  function setAria(isOpen: boolean) {\n    triggerButton.setAttribute(\"aria-expanded\", isOpen ? \"true\" : \"false\");\n  }\n\n  function addListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    menuItems.forEach((menuItem: HTMLElement, index: number) => {\n      if (!handlerMap.has(menuItem)) {\n        const handler = (event: KeyboardEvent) => handleKeyPress(event, menuItems, index, menuDiv, triggerButton);\n        menuItem.addEventListener(\"keydown\", handler);\n        handlerMap.set(menuItem, handler);\n      }\n    });\n  }\n\n  function removeListeners() {\n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    menuItems.forEach((menuItem: HTMLElement) => {\n      const handler = handlerMap.get(menuItem);\n      if (handler) {\n        menuItem.removeEventListener(\"keydown\", handler);\n        handlerMap.delete(menuItem);\n      }\n    });\n  }\n\n  function openMenu() {\n    menuDiv.style.display = \"block\";\n    setAria(true);\n    addListeners();\n  \n    const menuItems = menuDiv.querySelectorAll(`.${menuElementsClass}`) as NodeListOfHTMLElement<HTMLElement>;\n    if (menuItems.length > 0) menuItems[0].focus();\n  }\n\n  function closeMenu() {\n    removeListeners();\n    menuDiv.style.display = \"none\";\n    setAria(false);\n    triggerButton.focus();\n  }\n\n  function cleanup() {\n    removeListeners();\n  }\n\n  return { openMenu, closeMenu, cleanup };\n}"]}