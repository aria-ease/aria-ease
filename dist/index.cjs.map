{"version":3,"sources":["/Users/macx/aria-ease/package/dist/index.cjs","../src/accordion/index.ts","../src/block/index.ts","../src/menu/index.ts","../src/checkbox/index.ts","../src/checkbox/src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes.ts","../src/checkbox/src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes.ts","../src/utils/handleKeyPress/handleKeyPress.ts","../src/menu/src/cleanUpMenuEventListeners/cleanUpMenuEventListeners.ts","../src/menu/src/makeMenuAccessible/makeMenuAccessible.ts","../src/menu/src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes.ts","../src/radio/index.ts","../src/radio/src/single-radio/updateSingleRadioAriaAttributes.ts","../src/radio/src/group-radio/updateGroupRadiosAriaAttributes.ts","../src/toggle/index.ts"],"names":["accordion_exports","__export","updateAccordionTriggerAriaAttributes","block_exports","makeBlockAccessible","checkbox_exports","updateGroupCheckboxesAriaAttributes","updateSingleCheckboxAriaAttributes","checkboxStates","checkboxesClass","currentPressedCheckboxIndex","menu_exports","cleanUpMenuEventListeners","makeMenuAccessible","updateMenuTriggerAriaAttributes","menuId","menuItemsClass","console","log","triggerId","ariaLabel","radio_exports","updateGroupRadiosAriaAttributes","updateSingleRadioAriaAttributes","radioStates","radiosClass","currentPressedRadioIndex","toggle_exports","updateGroupTogglesAriaAttributes"],"mappings":"AAAA;SAK0D,GAAA,EAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,EAAA,GAAA,CAAA,IAAA,CAAA,KAAA,MAAA,EAAA,MAAA;SAAA,GAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,GAAA,CAAA,IAAA,MAAA,MAAA,EAAA,MAAA;SAAA,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAA,MAAA,MAAA,EAAA,MAAA;QAAA,KAAA,GAAA,CAAA,KAAA;QAAA,YAAA;IAAA;IAAA;AAG1D,yBAAyB;ACRzB,IAAAA,oBAAA,CAAA;AAAAC,SAAAD,mBAAA;YAAAE,8BAAAA,EAAAA,EAAAA;eAAAA;;eAAA;eAAA,kFAAA;eAAA,+BAAA,eAAA,EAAA,eAAA,EAAA,iBAAA,SAAA;iBAAAA,+BAAAA,eAAAA,EAAAA,eAAAA,EAAAA,iBAAAA,SAAAA;IAAA,OAAA,CAAA,GAAA,CAAA,gCAAA,eAAA,EAAA,eAAA,EAAA,iBAAA,SAAA;ADmBA,qBAAqB;AEnBrB,IAAAC,gBAAA,CAAA;AAAAF,SAAAE,eAAA;YAAAC,aAAAA,EAAAA,EAAAA;eAAAA;;eAAA;eAAA,KAAA;eAAA,IAAA,CAAA,uCAAA;eAAAA,QAAAA,MAAAA,OAAAA,EAAAA,eAAAA,MAAAA;MAAA,OAAA,CAAA,GAAA,CAAA,aAAA,EAAA;eAAA,GAAA,EAAA,eAAA,MAAA;;MFyBA,OAAA,CAAA,GAAA,CAAA,MAAA;eAAA,GAAA,OAAA,EAAA,eAAA,MAA2D;;IGzB3D,sBAAA,WAAA;eAAA;;ACAA,IAAAC,mBAAA,CAAA;UAAAC,+BAAAA,EAAAA,EAAAA,yBAAAA;eAAA,oBAAA,MAAA,EAAA,cAAA;;iBAAA,uBAAA;;;iBAAA,6FAAA;;eAAAA,mEAAAA,0BAAAA;;iBAAAC,8BAAAA,cAAAA,EAAAA,eAAAA,EAAAA,2BAAAA,GAAAA;MAAA,MAAA,EAAA,CAAA,CAAA,CAAA,CAAA,6FAAA;ACUA,SAAA,WAAA,yBAAA,cAAA,EAAA,eAAA,EAAA,2BAAA;ACDO,IAAA,KAASD,UAAAA,CAAAA,CAAAA,EAAAA,sBAAoCE,cAAA,EAAkCC,eAAA,EAAyBC,2BAAA;IAE/G,EAAA,EAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,OAAA,OAAA;MNoCA,EAAA,GAAA,IAAA,GAAA,GAAA,CAAoB,GAAA,MAAA;;aAAA;QAAA;QAAA;QAAA;QAAA;KAAA,CAAA,QAAA,CAAA;;MG/CpB,EAAAC,CAAAA,IAAAA,OAAAA,EAAAA,CAAA,CAAA,GAAA;iBAAA,GAAA,CAAA,KAAA;;iBAAA,OAAA,EAAA,WAAA;iBAAA,IAAA,KAAA,YAAA,GAAA,OAAA,KAAA,WAAA;QAAA;QAAA;QAAA;KAAA,CAAA,QAAA,CAAA,GAAA,IAAA;;;iBAAA,GAAA,CAAA,KAAA,8CAAA;;mBAAA,YAAA,EAAA,MAAA,MAAA,EAAA,SAAA;eAAA,YAAA,MAAA;;iBAAAC,GAAA,CAAA,CAAA,QAAA,GAAA,GAAA,EAAA,cAAA,oBAAA;;mBAAAA,KAAAA,KAAAA,EAAAA,QAAAA,IAAAA,EAAAA,gBAAAA,EAAAA,cAAAA,EAAAA,aAAAA,EAAAA,wBAAAA;;gBAAAC,CAAAA,GAAAA,SAAAA,MAAAA,EAAAA,KAAAA,SAAAA,EAAAA,SAAAA,SAAAA;;UAAAC,GAAAA,GAAAA,GAAAA,CAAAA;YAAAA,iBAAA;gBIWI,GAAA,CAAA,CAAA,UAAA,EAAA,KAAA,MAAA,EAAA,CAAA,CAAA,GAAA,QAAA,CAAA,EAAA,SAAA,SAAsB;oBCRnB,IAAA,CAASF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,OAAAA,WAA0BG,MAAA,EAAgBC,cAAA;oBACtDC,CAAAA,GAAQC,GAAA,CAAI,EAAA,MAAA,QAAA,kBAAA,CAAA;gBCMT,KAASL,EAAAA,IAAAA,MAAAA,MAAAA,CAAmBE,MAAA,CAAA,CAAgBC,KAAAA,WAAAA,YAAAA;yBAAAA,SAAA,EAAA,KAAA,IAAA,MAAA,cAAA;;wBAC/CC,IAAAA,EAAQC,CAAAA,CAAAA,CAAA,CAAI,EAAA,CAAA,OAAA,OAAA;6BAAA,KAAA,cAAA,kBAAA,CAAA;;gBAChB,GAAA,eAAA;yBCJgDC,SAAA,EAAmBC,SAAA,6BAAA;;YAC/DH,CAAAA,GAAAA,GAAAA,CAAQC,GAAA,CAAI,IAAA,CAAA,cAAA;mBAAA;YAAA;gBAChB,GAAA,CAAA,CAAA,YAAA,CAAA,aAAA,CAAA,WAAA,YAAA,EAAA;2BHsCkB,aAAA,aAAA,WAAA,EAAA,UAAA,CAAA,EAAA,wBAAA;;gBIhDlB,EAAAG,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,OAAA,CAAA,IAAA,UAAA,IAAA,WAAA,YAAA;oBAAApB,CAAAoB,GAAAA,QAAAA,EAAA,QAAA,KAAA,0BAAA;yBAAAC,MAAAA,CAAAA,UAAAA,UAAAA,WAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,wBAAAA;;wBAAAC,IAAAA,EAAAA,CAAAA,CAAAA,YAAAA,QAAAA,GAAA;6BAAA,KAAA,cAAA,kBAAA;;gBAAA,kBAAA,cAAA;yBAAA,qBAAA;;QJuDgB,KAAA;YAAA,EAAA,CAAA,mBAAA,WAAA,EAAA,UAA6E,CAAA,EAAA,wBAAA;gBK9CzFN,MAAAA,EAAQC,GAAA,CAAI,QAAA,YAAA,6BAAA;yBAAA,2BAAA,WAAA;;QLkDA,KAAA,eAAA,cAAA;;;gBMlDT,GAASI,CAAAA,WAAAA,CAAAA,GAAAA,cAAAA,EAAgCE,CAAAA,IAAAA,MAAA,EAA4BC,EAAAA,EAAAA,OAAA,EAAqBC,CAAAA,EAAAA,qBAAA,IAAA;oBAEjG,IAAA,EAAA,CAAA,CAAA,YAAA,YAAA,6BAAA;2BAAA,GAAA,KAAA,mBAAA,WAAA;gBNsDY,EAAA,SAAA,GAAA,IAAK,cAAA;;YOjEjBC,IAAAA,CAAAA,OAAAA,GAAAA,EAAA,CAAA,oBAAA,YAAA,EAAA,YAAA,EAAA,yBAAA;QAAAC,EAAAA,IAAAA,GAAAA,CAAAA,wBAAA,6BAAA;eAAAA,CAAAA,0BAAAA,WAAAA","sourcesContent":["'use strict';\n\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/accordion/index.ts\nvar accordion_exports = {};\n__export(accordion_exports, {\n  updateAccordionTriggerAriaAttributes: () => updateAccordionTriggerAriaAttributes\n});\n\n// src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts\nfunction updateAccordionTriggerAriaAttributes(accordionStates, accordionsClass, currentClickedTriggerIndex) {\n  console.log(\"Accordion updateAccordionTriggerAriaAttributes initiated\");\n}\n\n// src/block/index.ts\nvar block_exports = {};\n__export(block_exports, {\n  makeBlockAccessible: () => makeBlockAccessible\n});\n\n// src/block/src/makeBlockAccessible/makeBlockAccessible.ts\nfunction makeBlockAccessible(blockId, blockItemsClass) {\n  console.log(\"Block makeBlockAccessible initiated\");\n}\n\n// src/checkbox/index.ts\nvar checkbox_exports = {};\n__export(checkbox_exports, {\n  updateGroupCheckboxesAriaAttributes: () => updateGroupCheckboxesAriaAttributes,\n  updateSingleCheckboxAriaAttributes: () => updateSingleCheckboxAriaAttributes\n});\n\n// src/checkbox/src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes.ts\nfunction updateSingleCheckboxAriaAttributes(checkboxClass, updatedAriaLabel) {\n  console.log(\"Checkbox updateSingleCheckboxAriaAttributes initiated\");\n}\n\n// src/checkbox/src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes.ts\nfunction updateGroupCheckboxesAriaAttributes(checkboxStates, checkboxesClass, currentPressedCheckboxIndex) {\n  console.log(\"Checkbox updateGroupCheckboxesAriaAttributes initiated\");\n}\n\n// src/menu/index.ts\nvar menu_exports = {};\n__export(menu_exports, {\n  cleanUpMenuEventListeners: () => cleanUpMenuEventListeners,\n  makeMenuAccessible: () => makeMenuAccessible,\n  updateMenuTriggerAriaAttributes: () => updateMenuTriggerAriaAttributes\n});\n\n// src/menu/src/cleanUpMenuEventListeners/cleanUpMenuEventListeners.ts\nfunction cleanUpMenuEventListeners(menuId, menuItemsClass) {\n  console.log(\"Menu cleanUpMenuEventListeners initiated\");\n}\n\n// src/menu/src/makeMenuAccessible/makeMenuAccessible.ts\nfunction makeMenuAccessible(menuId, menuItemsClass) {\n  console.log(\"Menu makeMenuAccessible initiated\");\n}\n\n// src/menu/src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes.ts\nfunction updateMenuTriggerAriaAttributes(triggerId, ariaLabel) {\n  console.log(\"Menu updateMenuTriggerAriaAttributes initiated\");\n}\n\n// src/radio/index.ts\nvar radio_exports = {};\n__export(radio_exports, {\n  updateGroupRadiosAriaAttributes: () => updateGroupRadiosAriaAttributes,\n  updateSingleRadioAriaAttributes: () => updateSingleRadioAriaAttributes\n});\n\n// src/radio/src/single-radio/updateSingleRadioAriaAttributes.ts\nfunction updateSingleRadioAriaAttributes(radioClass) {\n  console.log(\"Radio updateSingleRadioAriaAttributes initiated\");\n}\n\n// src/radio/src/group-radio/updateGroupRadiosAriaAttributes.ts\nfunction updateGroupRadiosAriaAttributes(radioStates, radiosClass, currentPressedRadioIndex) {\n  console.log(\"Radio updateGroupRadiosAriaAttributes initiated\");\n}\n\n// src/toggle/index.ts\nvar toggle_exports = {};\n__export(toggle_exports, {\n  updateGroupTogglesAriaAttributes: () => updateGroupTogglesAriaAttributes,\n  updateSingleToggleAriaAttributes: () => updateSingleToggleAriaAttributes\n});\n\n// src/toggle/src/single-toggle/updateSingleToggleAriaAttributes.ts\nfunction updateSingleToggleAriaAttributes(toggleClass) {\n  console.log(\"Toggle updateSingleToggleAriaAttributes initiated\");\n}\n\n// src/toggle/src/group-toggle/updateGroupTogglesAriaAttributes.ts\nfunction updateGroupTogglesAriaAttributes(toggleStates, togglesClass, currentPressedToggleIndex) {\n  console.log(\"Toggle updateGroupTogglesAriaAttributes initiated\");\n}\n\nexports.Accordion = accordion_exports;\nexports.Block = block_exports;\nexports.Checkbox = checkbox_exports;\nexports.Menu = menu_exports;\nexports.Radio = radio_exports;\nexports.Toggle = toggle_exports;\n//# sourceMappingURL=index.cjs.map\n","import { updateAccordionTriggerAriaAttributes } from './src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes';\n\nexport { updateAccordionTriggerAriaAttributes }","import { makeBlockAccessible } from \"./src/makeBlockAccessible/makeBlockAccessible\";\n\nexport { makeBlockAccessible }","import { cleanUpMenuEventListeners } from \"./src/cleanUpMenuEventListeners/cleanUpMenuEventListeners\";\nimport { makeMenuAccessible } from \"./src/makeMenuAccessible/makeMenuAccessible\";\nimport { updateMenuTriggerAriaAttributes } from \"./src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes\";\n\nexport { cleanUpMenuEventListeners, makeMenuAccessible, updateMenuTriggerAriaAttributes }","import { updateSingleCheckboxAriaAttributes } from \"./src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes\";\nimport { updateGroupCheckboxesAriaAttributes } from \"./src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes\";\n\nexport { updateSingleCheckboxAriaAttributes, updateGroupCheckboxesAriaAttributes }","/**\n * Adds screen reader accessibility to a single checkbox. Updates the aria attributes of the checkbox. Checkbox element must possess the following aria attributes; aria-checked and aria-label.\n * @param {string} checkboxClass The shared class of all the checkboxes\n * @param {string} updatedAriaLabel The aria label to be updated to checkbox element\n */\n\nimport { HTMLElement } from \"../../../../../Types\";\n\nexport function updateSingleCheckboxAriaAttributes(checkboxClass: string, updatedAriaLabel: string): void {\n    console.log('Checkbox updateSingleCheckboxAriaAttributes initiated');\n}","/**\n * Adds screen reader accessibility to multiple checkboxes. Updates the aria attributes of the checkboxes. Checkbox elements must possess the following aria attributes; aria-checked and aria-label.\n * @param {CheckboxStates[]} checkboxStates Array of objects containing checkboxes state information\n * @param {string} checkboxesClass The shared class of all the checkboxes\n * @param {number} currentPressedCheckboxIndex Index of the currently checked or unchecked checkbox\n */\n\nimport { HTMLElement, CheckboxStates } from \"../../../../../Types\";\n\nexport function updateGroupCheckboxesAriaAttributes(checkboxStates: CheckboxStates[], checkboxesClass: string, currentPressedCheckboxIndex: number): void {\n    console.log('Checkbox updateGroupCheckboxesAriaAttributes initiated');\n}","import { NodeListOfHTMLElement, HTMLElement } from \"../../../Types\";\nimport { updateMenuTriggerAriaAttributes } from \"../../menu\";\n\n\nfunction isTextInput(el: HTMLElement): boolean {\n    if (el.tagName !== 'INPUT') return false;\n    const type = (el as HTMLInputElement).type;\n    return ['text', 'email', 'password', 'tel', 'number'].includes(type);\n}\n\nfunction isTextArea(el: HTMLElement): boolean {\n    return el.tagName === 'TEXTAREA';\n}\n\nfunction isNativeButton(el: HTMLElement): boolean {\n    return el.tagName === 'BUTTON' || (el.tagName === 'INPUT' && ['button', 'submit', 'reset'].includes((el as HTMLInputElement).type));\n}\n\nfunction isLink(el: HTMLElement): boolean {\n    return el.tagName === 'A';\n}\n\nfunction moveFocus(elementItems: NodeListOfHTMLElement, currentIndex: number, direction: -1 | 1) {\n    const len = elementItems.length;\n    const nextIndex = (currentIndex + direction + len) % len;\n    elementItems.item(nextIndex).focus();\n}\n\n\n\nfunction handleMenuEscapeKeyPress(menuElement: HTMLElement, menuTriggerButton: HTMLElement, menuClosedStateAriaLabel: string) {\n    menuElement.style.display = 'none';\n    const menuTriggerButtonId = menuTriggerButton.getAttribute('id');\n    if (!menuTriggerButtonId) {\n        throw new Error(\"Menu trigger button does not have id attribute\");\n    }\n    updateMenuTriggerAriaAttributes(menuTriggerButtonId, menuClosedStateAriaLabel);\n}\n\nexport function handleKeyPress(\n    event: KeyboardEvent,\n    elementItems: NodeListOfHTMLElement,\n    elementItemIndex: number,\n    menuElementDiv?: HTMLElement,\n    triggerButton?: HTMLElement,\n    menuClosedStateAriaLabel?: string\n): void {\n    const currentEl = elementItems.item(elementItemIndex);\n    switch (event.key) {\n        case 'ArrowUp':\n        case 'ArrowLeft': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, -1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const selectionStart = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (selectionStart === 0) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, -1);\n                }\n            }\n            break;\n        }\n        case 'ArrowDown':\n        case 'ArrowRight': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, 1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const value = (currentEl as HTMLInputElement | HTMLTextAreaElement).value;\n                const selectionStart = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (selectionStart === value.length) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, 1);\n                }\n            }\n            break;\n        }\n        case 'Escape': {\n            event.preventDefault();\n            if (menuElementDiv && triggerButton && menuClosedStateAriaLabel) {\n                if (getComputedStyle(menuElementDiv).display === 'block') {\n                    handleMenuEscapeKeyPress(menuElementDiv, triggerButton, menuClosedStateAriaLabel);\n                }\n                triggerButton.focus();\n            }\n            break;\n        }\n        case 'Enter':\n        case ' ': {\n            if (isNativeButton(currentEl) || isLink(currentEl)) {\n                event.preventDefault();\n                currentEl.click();\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}","import { NodeListOfHTMLElement } from \"../../../../Types\";\n\n\nexport function cleanUpMenuEventListeners(menuId: string, menuItemsClass: string): void {\n    console.log('Menu cleanUpMenuEventListeners initiated');\n}","/**\n * Adds keyboard interaction to toggle menu. The menu traps focus and can be interacted with using the keyboard. The first item of the menu has focus when menu appears.\n * @param {string} menuId The id of the menu\n * @param {string} menuItemsClass The shared class of the items that are children of the menu\n*/\n\nimport { HTMLElement, NodeListOfHTMLElement } from '../../../../Types'\n\nlet eventListenersAdded: Set<HTMLElement> = new Set();\n\nexport function makeMenuAccessible(menuId: string, menuItemsClass: string): void {\n    console.log('Menu makeMenuAccessible initiated');\n}","/**\n * Adds screen reader accessibility to menus. Updates the aria attributes of the menu trigger button. Trigger button element must possess the following aria attributes; aria-expanded and aria-label.\n * @param {string} triggerId The id of the trigger button that toggles the menu\n * @param {string} ariaLabel The aria label to be updated to trigger element\n */\n\nimport { HTMLElement } from \"../../../../Types\";\n\nexport function updateMenuTriggerAriaAttributes(triggerId: string, ariaLabel: string): void {\n    console.log('Menu updateMenuTriggerAriaAttributes initiated');\n}","import { updateSingleRadioAriaAttributes } from \"./src/single-radio/updateSingleRadioAriaAttributes\";\nimport { updateGroupRadiosAriaAttributes } from \"./src/group-radio/updateGroupRadiosAriaAttributes\";\n\nexport { updateSingleRadioAriaAttributes, updateGroupRadiosAriaAttributes }","/**\n * Adds screen reader accessibility to single radio button. Updates the aria attribute of the radio button. Radio element must possess the following aria attributes; aria-checked and aria-label.\n * @param {string} radioClass The class of the radio button\n * @param {string} updatedAriaLabel The aria label to be updated to button element\n */\n\nimport { HTMLElement } from \"../../../../Types\";\n\nexport function updateSingleRadioAriaAttributes(radioClass: string): void {\n    console.log('Radio updateSingleRadioAriaAttributes initiated');\n}","/**\n * Adds screen reader accessibility to multiple radio buttons. Updates the aria attributes of the radio buttons. Radio elements must possess the following aria attributes; aria-checked and aria-label.\n * @param {RadioStates[]} radioStates Array of objects containing radio buttons state information\n * @param {string} radiosClass The shared class of all the radio buttons\n * @param {number} currentPressedRadioIndex Index of the currently checked or unchecked radio button\n */\n\nimport { HTMLElement, RadioStates } from \"../../../../Types\";\n\nexport function updateGroupRadiosAriaAttributes(radioStates: RadioStates[], radiosClass: string, currentPressedRadioIndex: number): void {\n    console.log('Radio updateGroupRadiosAriaAttributes initiated');\n}","import { updateSingleToggleAriaAttributes } from \"./src/single-toggle/updateSingleToggleAriaAttributes\";\nimport { updateGroupTogglesAriaAttributes } from \"./src/group-toggle/updateGroupTogglesAriaAttributes\";\n\nexport { updateSingleToggleAriaAttributes, updateGroupTogglesAriaAttributes }"]}