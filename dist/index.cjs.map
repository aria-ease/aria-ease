{"version":3,"sources":["/Users/macx/aria-ease/package/dist/index.cjs","../src/accordion/index.ts","../src/block/index.ts","../src/menu/index.ts","../src/checkbox/index.ts","../src/checkbox/src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes.ts","../src/checkbox/src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes.ts","../src/utils/handleKeyPress/handleKeyPress.ts","../src/menu/src/cleanUpMenuEventListeners/cleanUpMenuEventListeners.ts","../src/menu/src/makeMenuAccessible/makeMenuAccessible.ts","../src/menu/src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes.ts","../src/radio/index.ts","../src/radio/src/single-radio/updateSingleRadioAriaAttributes.ts","../src/radio/src/group-radio/updateGroupRadiosAriaAttributes.ts","../src/toggle/index.ts"],"names":["accordion_exports","__export","updateAccordionTriggerAriaAttributes","block_exports","makeBlockAccessible","updateGroupCheckboxesAriaAttributes","updateSingleCheckboxAriaAttributes","checkboxStates","checkboxesClass","currentPressedCheckboxIndex","menu_exports","cleanUpMenuEventListeners","makeMenuAccessible","updateMenuTriggerAriaAttributes","menuId","menuItemsClass","console","log","triggerId","ariaLabel","radio_exports","updateGroupRadiosAriaAttributes","updateSingleRadioAriaAttributes","radioStates","radiosClass","currentPressedRadioIndex","toggle_exports","updateGroupTogglesAriaAttributes"],"mappings":"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","sourcesContent":["'use strict';\n\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/accordion/index.ts\nvar accordion_exports = {};\n__export(accordion_exports, {\n  updateAccordionTriggerAriaAttributes: () => updateAccordionTriggerAriaAttributes\n});\n\n// src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts\nfunction updateAccordionTriggerAriaAttributes(accordionStates, accordionsClass, currentClickedTriggerIndex) {\n  console.log(\"Accordion updateAccordionTriggerAriaAttributes initiated\");\n}\n\n// src/block/index.ts\nvar block_exports = {};\n__export(block_exports, {\n  makeBlockAccessible: () => makeBlockAccessible\n});\n\n// src/block/src/makeBlockAccessible/makeBlockAccessible.ts\nfunction makeBlockAccessible(blockId, blockItemsClass) {\n  console.log(\"Block makeBlockAccessible initiated\");\n}\n\n// src/checkbox/index.ts\nvar checkbox_exports = {};\n__export(checkbox_exports, {\n  updateGroupCheckboxesAriaAttributes: () => updateGroupCheckboxesAriaAttributes,\n  updateSingleCheckboxAriaAttributes: () => updateSingleCheckboxAriaAttributes\n});\n\n// src/checkbox/src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes.ts\nfunction updateSingleCheckboxAriaAttributes(checkboxClass, updatedAriaLabel) {\n  console.log(\"Checkbox updateSingleCheckboxAriaAttributes initiated\");\n}\n\n// src/checkbox/src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes.ts\nfunction updateGroupCheckboxesAriaAttributes(checkboxStates, checkboxesClass, currentPressedCheckboxIndex) {\n  console.log(\"Checkbox updateGroupCheckboxesAriaAttributes initiated\");\n}\n\n// src/menu/index.ts\nvar menu_exports = {};\n__export(menu_exports, {\n  cleanUpMenuEventListeners: () => cleanUpMenuEventListeners,\n  makeMenuAccessible: () => makeMenuAccessible,\n  updateMenuTriggerAriaAttributes: () => updateMenuTriggerAriaAttributes\n});\n\n// src/menu/src/cleanUpMenuEventListeners/cleanUpMenuEventListeners.ts\nfunction cleanUpMenuEventListeners(menuId, menuItemsClass) {\n  console.log(\"Menu cleanUpMenuEventListeners initiated\");\n}\n\n// src/menu/src/makeMenuAccessible/makeMenuAccessible.ts\nfunction makeMenuAccessible(menuId, menuItemsClass) {\n  console.log(\"Menu makeMenuAccessible initiated\");\n}\n\n// src/menu/src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes.ts\nfunction updateMenuTriggerAriaAttributes(triggerId, ariaLabel) {\n  console.log(\"Menu updateMenuTriggerAriaAttributes initiated\");\n}\n\n// src/radio/index.ts\nvar radio_exports = {};\n__export(radio_exports, {\n  updateGroupRadiosAriaAttributes: () => updateGroupRadiosAriaAttributes,\n  updateSingleRadioAriaAttributes: () => updateSingleRadioAriaAttributes\n});\n\n// src/radio/src/single-radio/updateSingleRadioAriaAttributes.ts\nfunction updateSingleRadioAriaAttributes(radioClass) {\n  console.log(\"Radio updateSingleRadioAriaAttributes initiated\");\n}\n\n// src/radio/src/group-radio/updateGroupRadiosAriaAttributes.ts\nfunction updateGroupRadiosAriaAttributes(radioStates, radiosClass, currentPressedRadioIndex) {\n  console.log(\"Radio updateGroupRadiosAriaAttributes initiated\");\n}\n\n// src/toggle/index.ts\nvar toggle_exports = {};\n__export(toggle_exports, {\n  updateGroupTogglesAriaAttributes: () => updateGroupTogglesAriaAttributes,\n  updateSingleToggleAriaAttributes: () => updateSingleToggleAriaAttributes\n});\n\n// src/toggle/src/single-toggle/updateSingleToggleAriaAttributes.ts\nfunction updateSingleToggleAriaAttributes(toggleClass) {\n  console.log(\"Toggle updateSingleToggleAriaAttributes initiated\");\n}\n\n// src/toggle/src/group-toggle/updateGroupTogglesAriaAttributes.ts\nfunction updateGroupTogglesAriaAttributes(toggleStates, togglesClass, currentPressedToggleIndex) {\n  console.log(\"Toggle updateGroupTogglesAriaAttributes initiated\");\n}\n\nexports.Accordion = accordion_exports;\nexports.Block = block_exports;\nexports.Checkbox = checkbox_exports;\nexports.Menu = menu_exports;\nexports.Radio = radio_exports;\nexports.Toggle = toggle_exports;\n//# sourceMappingURL=index.cjs.map\n","import { updateAccordionTriggerAriaAttributes } from './src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes';\n\nexport { updateAccordionTriggerAriaAttributes }","import { makeBlockAccessible } from \"./src/makeBlockAccessible/makeBlockAccessible\";\n\nexport { makeBlockAccessible }","import { cleanUpMenuEventListeners } from \"./src/cleanUpMenuEventListeners/cleanUpMenuEventListeners\";\nimport { makeMenuAccessible } from \"./src/makeMenuAccessible/makeMenuAccessible\";\nimport { updateMenuTriggerAriaAttributes } from \"./src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes\";\n\nexport { cleanUpMenuEventListeners, makeMenuAccessible, updateMenuTriggerAriaAttributes }","import { updateSingleCheckboxAriaAttributes } from \"./src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes\";\nimport { updateGroupCheckboxesAriaAttributes } from \"./src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes\";\n\nexport { updateSingleCheckboxAriaAttributes, updateGroupCheckboxesAriaAttributes }","/**\n * Adds screen reader accessibility to a single checkbox. Updates the aria attributes of the checkbox. Checkbox element must possess the following aria attributes; aria-checked and aria-label.\n * @param {string} checkboxClass The shared class of all the checkboxes\n * @param {string} updatedAriaLabel The aria label to be updated to checkbox element\n */\n\nimport { HTMLElement } from \"../../../../../Types\";\n\nexport function updateSingleCheckboxAriaAttributes(checkboxClass: string, updatedAriaLabel: string): void {\n    console.log('Checkbox updateSingleCheckboxAriaAttributes initiated');\n}","/**\n * Adds screen reader accessibility to multiple checkboxes. Updates the aria attributes of the checkboxes. Checkbox elements must possess the following aria attributes; aria-checked and aria-label.\n * @param {CheckboxStates[]} checkboxStates Array of objects containing checkboxes state information\n * @param {string} checkboxesClass The shared class of all the checkboxes\n * @param {number} currentPressedCheckboxIndex Index of the currently checked or unchecked checkbox\n */\n\nimport { HTMLElement, CheckboxStates } from \"../../../../../Types\";\n\nexport function updateGroupCheckboxesAriaAttributes(checkboxStates: CheckboxStates[], checkboxesClass: string, currentPressedCheckboxIndex: number): void {\n    console.log('Checkbox updateGroupCheckboxesAriaAttributes initiated');\n}","import { NodeListOfHTMLElement, HTMLElement } from \"../../../Types\";\nimport { updateMenuTriggerAriaAttributes } from \"../../menu\";\n\n\nfunction isTextInput(el: HTMLElement): boolean {\n    if (el.tagName !== 'INPUT') return false;\n    const type = (el as HTMLInputElement).type;\n    return ['text', 'email', 'password', 'tel', 'number'].includes(type);\n}\n\nfunction isTextArea(el: HTMLElement): boolean {\n    return el.tagName === 'TEXTAREA';\n}\n\nfunction isNativeButton(el: HTMLElement): boolean {\n    return el.tagName === 'BUTTON' || (el.tagName === 'INPUT' && ['button', 'submit', 'reset'].includes((el as HTMLInputElement).type));\n}\n\nfunction isLink(el: HTMLElement): boolean {\n    return el.tagName === 'A';\n}\n\nfunction moveFocus(elementItems: NodeListOfHTMLElement, currentIndex: number, direction: -1 | 1) {\n    const len = elementItems.length;\n    const nextIndex = (currentIndex + direction + len) % len;\n    elementItems.item(nextIndex).focus();\n}\n\n\n\nfunction handleMenuEscapeKeyPress(menuElement: HTMLElement, menuTriggerButton: HTMLElement, menuClosedStateAriaLabel: string) {\n    menuElement.style.display = 'none';\n    const menuTriggerButtonId = menuTriggerButton.getAttribute('id');\n    if (!menuTriggerButtonId) {\n        throw new Error(\"Menu trigger button does not have id attribute\");\n    }\n    updateMenuTriggerAriaAttributes(menuTriggerButtonId, menuClosedStateAriaLabel);\n}\n\nexport function handleKeyPress(\n    event: KeyboardEvent,\n    elementItems: NodeListOfHTMLElement,\n    elementItemIndex: number,\n    menuElementDiv?: HTMLElement,\n    triggerButton?: HTMLElement,\n    menuClosedStateAriaLabel?: string\n): void {\n    const currentEl = elementItems.item(elementItemIndex);\n    switch (event.key) {\n        case 'ArrowUp':\n        case 'ArrowLeft': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, -1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const selectionStart = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (selectionStart === 0) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, -1);\n                }\n            }\n            break;\n        }\n        case 'ArrowDown':\n        case 'ArrowRight': {\n            if (!isTextInput(currentEl) && !isTextArea(currentEl)) {\n                event.preventDefault();\n                moveFocus(elementItems, elementItemIndex, 1);\n            } else if (isTextInput(currentEl) || isTextArea(currentEl)) {\n                const value = (currentEl as HTMLInputElement | HTMLTextAreaElement).value;\n                const selectionStart = (currentEl as HTMLInputElement | HTMLTextAreaElement).selectionStart;\n                if (selectionStart === value.length) {\n                    event.preventDefault();\n                    moveFocus(elementItems, elementItemIndex, 1);\n                }\n            }\n            break;\n        }\n        case 'Escape': {\n            event.preventDefault();\n            if (menuElementDiv && triggerButton && menuClosedStateAriaLabel) {\n                if (getComputedStyle(menuElementDiv).display === 'block') {\n                    handleMenuEscapeKeyPress(menuElementDiv, triggerButton, menuClosedStateAriaLabel);\n                }\n                triggerButton.focus();\n            }\n            break;\n        }\n        case 'Enter':\n        case ' ': {\n            if (isNativeButton(currentEl) || isLink(currentEl)) {\n                event.preventDefault();\n                currentEl.click();\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}","import { NodeListOfHTMLElement } from \"../../../../Types\";\n\n\nexport function cleanUpMenuEventListeners(menuId: string, menuItemsClass: string): void {\n    console.log('Menu cleanUpMenuEventListeners initiated');\n}","/**\n * Adds keyboard interaction to toggle menu. The menu traps focus and can be interacted with using the keyboard. The first item of the menu has focus when menu appears.\n * @param {string} menuId The id of the menu\n * @param {string} menuItemsClass The shared class of the items that are children of the menu\n*/\n\nimport { HTMLElement, NodeListOfHTMLElement } from '../../../../Types'\n\nlet eventListenersAdded: Set<HTMLElement> = new Set();\n\nexport function makeMenuAccessible(menuId: string, menuItemsClass: string): void {\n    console.log('Menu makeMenuAccessible initiated');\n}","/**\n * Adds screen reader accessibility to menus. Updates the aria attributes of the menu trigger button. Trigger button element must possess the following aria attributes; aria-expanded and aria-label.\n * @param {string} triggerId The id of the trigger button that toggles the menu\n * @param {string} ariaLabel The aria label to be updated to trigger element\n */\n\nimport { HTMLElement } from \"../../../../Types\";\n\nexport function updateMenuTriggerAriaAttributes(triggerId: string, ariaLabel: string): void {\n    console.log('Menu updateMenuTriggerAriaAttributes initiated');\n}","import { updateSingleRadioAriaAttributes } from \"./src/single-radio/updateSingleRadioAriaAttributes\";\nimport { updateGroupRadiosAriaAttributes } from \"./src/group-radio/updateGroupRadiosAriaAttributes\";\n\nexport { updateSingleRadioAriaAttributes, updateGroupRadiosAriaAttributes }","/**\n * Adds screen reader accessibility to single radio button. Updates the aria attribute of the radio button. Radio element must possess the following aria attributes; aria-checked and aria-label.\n * @param {string} radioClass The class of the radio button\n * @param {string} updatedAriaLabel The aria label to be updated to button element\n */\n\nimport { HTMLElement } from \"../../../../Types\";\n\nexport function updateSingleRadioAriaAttributes(radioClass: string): void {\n    console.log('Radio updateSingleRadioAriaAttributes initiated');\n}","/**\n * Adds screen reader accessibility to multiple radio buttons. Updates the aria attributes of the radio buttons. Radio elements must possess the following aria attributes; aria-checked and aria-label.\n * @param {RadioStates[]} radioStates Array of objects containing radio buttons state information\n * @param {string} radiosClass The shared class of all the radio buttons\n * @param {number} currentPressedRadioIndex Index of the currently checked or unchecked radio button\n */\n\nimport { HTMLElement, RadioStates } from \"../../../../Types\";\n\nexport function updateGroupRadiosAriaAttributes(radioStates: RadioStates[], radiosClass: string, currentPressedRadioIndex: number): void {\n    console.log('Radio updateGroupRadiosAriaAttributes initiated');\n}","import { updateSingleToggleAriaAttributes } from \"./src/single-toggle/updateSingleToggleAriaAttributes\";\nimport { updateGroupTogglesAriaAttributes } from \"./src/group-toggle/updateGroupTogglesAriaAttributes\";\n\nexport { updateSingleToggleAriaAttributes, updateGroupTogglesAriaAttributes }"]}