{"version":3,"sources":["/Users/macx/aria-ease/package/dist/index.cjs","../src/accordion/index.ts","../src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts","../src/block/index.ts"],"names":["accordion_exports","__export","block_exports"],"mappings":"AAAA;SAK0D,GAAA,EAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,EAAA,GAAA,CAAA,IAAA,CAAA,KAAA,MAAA,EAAA,MAAA;SAAA,GAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,GAAA,CAAA,IAAA,MAAA,MAAA,EAAA,MAAA;SAAA,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAA,MAAA,MAAA,EAAA,MAAA;QAAA,KAAA,GAAA,CAAA,KAAA;QAAA,YAAA;IAAA;IAAA;AAG1D,yBAAyB;ACRzB,IAAAA,oBAAA,CAAA;AAAAC,SAAAD,mBAAA;;;;;;;;;;;;QCa4F,EAAA,aAAA,EAAE,EAAA,EAAA,IAAA,CAAA,GAAA,CAAA,aAAA,gBAAA,CAAA,IAAA,OAAA;UCb9F,EAAAE,EAAAA,IAAAA,MAAAA,EAAA,CAAA,MAAA,KAAA,GAAA;cAAAD,EAAAA,GAAAC,CAAAA,IAAAA,EAAAA,IAAAA,IAAA","sourcesContent":["'use strict';\n\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/accordion/index.ts\nvar accordion_exports = {};\n__export(accordion_exports, {\n  updateAccordionTriggerAriaAttributes: () => updateAccordionTriggerAriaAttributes\n});\n\n// src/accordion/src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes.ts\nfunction updateAccordionTriggerAriaAttributes(accordionStates, accordionsClass, currentClickedTriggerIndex) {\n  console.log(\"Accordion updateAccordionTriggerAriaAttributes initiated\");\n}\n\n// src/block/index.ts\nvar block_exports = {};\n__export(block_exports, {\n  makeBlockAccessible: () => makeBlockAccessible\n});\n\n// src/block/src/makeBlockAccessible/makeBlockAccessible.ts\nfunction makeBlockAccessible(blockId, blockItemsClass) {\n  console.log(\"Block makeBlockAccessible initiated\");\n}\n\n// src/checkbox/index.ts\nvar checkbox_exports = {};\n__export(checkbox_exports, {\n  updateGroupCheckboxesAriaAttributes: () => updateGroupCheckboxesAriaAttributes,\n  updateSingleCheckboxAriaAttributes: () => updateSingleCheckboxAriaAttributes\n});\n\n// src/checkbox/src/single-checkbox/updateSingleCheckboxAriaAttributes/updateSingleCheckboxAriaAttributes.ts\nfunction updateSingleCheckboxAriaAttributes(checkboxClass, updatedAriaLabel) {\n  console.log(\"Checkbox updateSingleCheckboxAriaAttributes initiated\");\n}\n\n// src/checkbox/src/group-checkbox/updateGroupCheckboxesAriaAttributes/updateGroupCheckboxesAriaAttributes.ts\nfunction updateGroupCheckboxesAriaAttributes(checkboxStates, checkboxesClass, currentPressedCheckboxIndex) {\n  console.log(\"Checkbox updateGroupCheckboxesAriaAttributes initiated\");\n}\n\n// src/menu/index.ts\nvar menu_exports = {};\n__export(menu_exports, {\n  cleanUpMenuEventListeners: () => cleanUpMenuEventListeners,\n  makeMenuAccessible: () => makeMenuAccessible,\n  updateMenuTriggerAriaAttributes: () => updateMenuTriggerAriaAttributes\n});\n\n// src/menu/src/cleanUpMenuEventListeners/cleanUpMenuEventListeners.ts\nfunction cleanUpMenuEventListeners(menuId, menuItemsClass) {\n  console.log(\"Menu cleanUpMenuEventListeners initiated\");\n}\n\n// src/menu/src/makeMenuAccessible/makeMenuAccessible.ts\nfunction makeMenuAccessible(menuId, menuItemsClass) {\n  console.log(\"Menu makeMenuAccessible initiated\");\n}\n\n// src/menu/src/updateMenuTriggerAriaAttributes/updateMenuTriggerAriaAttributes.ts\nfunction updateMenuTriggerAriaAttributes(triggerId, ariaLabel) {\n  console.log(\"Menu updateMenuTriggerAriaAttributes initiated\");\n}\n\n// src/radio/index.ts\nvar radio_exports = {};\n__export(radio_exports, {\n  updateGroupRadiosAriaAttributes: () => updateGroupRadiosAriaAttributes,\n  updateSingleRadioAriaAttributes: () => updateSingleRadioAriaAttributes\n});\n\n// src/radio/src/single-radio/updateSingleRadioAriaAttributes.ts\nfunction updateSingleRadioAriaAttributes(radioClass) {\n  console.log(\"Radio updateSingleRadioAriaAttributes initiated\");\n}\n\n// src/radio/src/group-radio/updateGroupRadiosAriaAttributes.ts\nfunction updateGroupRadiosAriaAttributes(radioStates, radiosClass, currentPressedRadioIndex) {\n  console.log(\"Radio updateGroupRadiosAriaAttributes initiated\");\n}\n\n// src/toggle/index.ts\nvar toggle_exports = {};\n__export(toggle_exports, {\n  updateGroupTogglesAriaAttributes: () => updateGroupTogglesAriaAttributes,\n  updateSingleToggleAriaAttributes: () => updateSingleToggleAriaAttributes\n});\n\n// src/toggle/src/single-toggle/updateSingleToggleAriaAttributes.ts\nfunction updateSingleToggleAriaAttributes(toggleClass) {\n  console.log(\"Toggle updateSingleToggleAriaAttributes initiated\");\n}\n\n// src/toggle/src/group-toggle/updateGroupTogglesAriaAttributes.ts\nfunction updateGroupTogglesAriaAttributes(toggleStates, togglesClass, currentPressedToggleIndex) {\n  console.log(\"Toggle updateGroupTogglesAriaAttributes initiated\");\n}\n\nexports.Accordion = accordion_exports;\nexports.Block = block_exports;\nexports.Checkbox = checkbox_exports;\nexports.Menu = menu_exports;\nexports.Radio = radio_exports;\nexports.Toggle = toggle_exports;\n//# sourceMappingURL=index.cjs.map\n","import { updateAccordionTriggerAriaAttributes } from \"./src/updateAccordionTriggerAriaAttributes/updateAccordionTriggerAriaAttributes\";\n\nexport { updateAccordionTriggerAriaAttributes }","/**\n * Adds screen reader accessibility to accordions. Updates the aria attributes of the accordion trigger button. Trigger button element must possess the following aria attributes; aria-expanded and aria-label.\n * @param {AccordionStates[]} accordionStates Array of objects containing accordions state information.\n * @param {string} accordionId The id of the accordion container.\n * @param {string} accordionElementsClass The shared class of all the accordion triggers.\n * @param {number} currentClickedTriggerIndex Index of the currently clicked accordion trigger within the accordion div container.\n */\n\nimport { HTMLElement, AccordionStates } from \"../../../../Types\";\n\nexport function updateAccordionTriggerAriaAttributes(accordionId: string, accordionElementsClass: string, accordionStates: AccordionStates[], currentClickedTriggerIndex: number): void {\n    const accordionDiv: HTMLElement | null = document.querySelector(`#${accordionId}`);\n    if (!accordionDiv) {\n        throw new Error(\"Invalid accordion main div id provided.\");\n    }\n\n    const accordionItems: HTMLElement[] = Array.from(accordionDiv.querySelectorAll(`.${accordionElementsClass}`));\n    if (accordionItems.length === 0) {\n        throw new Error(\"Invalid accordion items shared class provided.\");\n    }\n\n    if (accordionItems.length !== accordionStates.length) {\n        throw new Error(\n            `Accordion state/DOM length mismatch: found ${accordionItems.length} triggers, but got ${accordionStates.length} state objects.`\n        );\n    }\n\n    accordionItems.forEach((accordionItem: HTMLElement, index: number) => {\n        const state = accordionStates[index];\n        const expanded = accordionItem.getAttribute(\"aria-expanded\");\n        const label = accordionItem.getAttribute(\"aria-label\");\n        const shouldBeExpanded = index === currentClickedTriggerIndex ? (state.display ? \"true\" : \"false\") : \"false\";\n        const shouldBeLabel = state.display ? state.openedAriaLabel : state.closedAriaLabel;\n        if (expanded !== shouldBeExpanded) {\n            accordionItem.setAttribute(\"aria-expanded\", shouldBeExpanded);\n        }\n        if (label !== shouldBeLabel) {\n            accordionItem.setAttribute(\"aria-label\", shouldBeLabel);\n        }\n    });\n}","import { makeBlockAccessible } from \"./src/makeBlockAccessible/makeBlockAccessible\";\n\nexport { makeBlockAccessible }"]}